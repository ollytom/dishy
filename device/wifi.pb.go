// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: spacex/api/device/wifi.proto

package device

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	telemetron "olowe.co/dishy/telemetron"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WifiGetClientHistoryResponse_WifiLimitedReason int32

const (
	WifiGetClientHistoryResponse_LIMIT_UNKNOWN         WifiGetClientHistoryResponse_WifiLimitedReason = 0
	WifiGetClientHistoryResponse_LIMIT_NONE            WifiGetClientHistoryResponse_WifiLimitedReason = 1
	WifiGetClientHistoryResponse_LIMIT_UNCLASSIFIED    WifiGetClientHistoryResponse_WifiLimitedReason = 2
	WifiGetClientHistoryResponse_LIMIT_DROPPED_PACKETS WifiGetClientHistoryResponse_WifiLimitedReason = 3
)

// Enum value maps for WifiGetClientHistoryResponse_WifiLimitedReason.
var (
	WifiGetClientHistoryResponse_WifiLimitedReason_name = map[int32]string{
		0: "LIMIT_UNKNOWN",
		1: "LIMIT_NONE",
		2: "LIMIT_UNCLASSIFIED",
		3: "LIMIT_DROPPED_PACKETS",
	}
	WifiGetClientHistoryResponse_WifiLimitedReason_value = map[string]int32{
		"LIMIT_UNKNOWN":         0,
		"LIMIT_NONE":            1,
		"LIMIT_UNCLASSIFIED":    2,
		"LIMIT_DROPPED_PACKETS": 3,
	}
)

func (x WifiGetClientHistoryResponse_WifiLimitedReason) Enum() *WifiGetClientHistoryResponse_WifiLimitedReason {
	p := new(WifiGetClientHistoryResponse_WifiLimitedReason)
	*p = x
	return p
}

func (x WifiGetClientHistoryResponse_WifiLimitedReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiGetClientHistoryResponse_WifiLimitedReason) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_proto_enumTypes[0].Descriptor()
}

func (WifiGetClientHistoryResponse_WifiLimitedReason) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_proto_enumTypes[0]
}

func (x WifiGetClientHistoryResponse_WifiLimitedReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiGetClientHistoryResponse_WifiLimitedReason.Descriptor instead.
func (WifiGetClientHistoryResponse_WifiLimitedReason) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{15, 0}
}

type WifiClient_Interface int32

const (
	WifiClient_UNKNOWN WifiClient_Interface = 0
	WifiClient_ETH     WifiClient_Interface = 1
	WifiClient_RF_2GHZ WifiClient_Interface = 2
	WifiClient_RF_5GHZ WifiClient_Interface = 3
)

// Enum value maps for WifiClient_Interface.
var (
	WifiClient_Interface_name = map[int32]string{
		0: "UNKNOWN",
		1: "ETH",
		2: "RF_2GHZ",
		3: "RF_5GHZ",
	}
	WifiClient_Interface_value = map[string]int32{
		"UNKNOWN": 0,
		"ETH":     1,
		"RF_2GHZ": 2,
		"RF_5GHZ": 3,
	}
)

func (x WifiClient_Interface) Enum() *WifiClient_Interface {
	p := new(WifiClient_Interface)
	*p = x
	return p
}

func (x WifiClient_Interface) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiClient_Interface) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_proto_enumTypes[1].Descriptor()
}

func (WifiClient_Interface) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_proto_enumTypes[1]
}

func (x WifiClient_Interface) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiClient_Interface.Descriptor instead.
func (WifiClient_Interface) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{18, 0}
}

type WifiClient_Role int32

const (
	WifiClient_ROLE_UNKNOWN WifiClient_Role = 0
	WifiClient_CLIENT       WifiClient_Role = 1
	WifiClient_REPEATER     WifiClient_Role = 2
	WifiClient_CONTROLLER   WifiClient_Role = 3
)

// Enum value maps for WifiClient_Role.
var (
	WifiClient_Role_name = map[int32]string{
		0: "ROLE_UNKNOWN",
		1: "CLIENT",
		2: "REPEATER",
		3: "CONTROLLER",
	}
	WifiClient_Role_value = map[string]int32{
		"ROLE_UNKNOWN": 0,
		"CLIENT":       1,
		"REPEATER":     2,
		"CONTROLLER":   3,
	}
)

func (x WifiClient_Role) Enum() *WifiClient_Role {
	p := new(WifiClient_Role)
	*p = x
	return p
}

func (x WifiClient_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiClient_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_proto_enumTypes[2].Descriptor()
}

func (WifiClient_Role) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_proto_enumTypes[2]
}

func (x WifiClient_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiClient_Role.Descriptor instead.
func (WifiClient_Role) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{18, 1}
}

type WifiScanResults_Network_Source int32

const (
	WifiScanResults_Network_UNKNOWN     WifiScanResults_Network_Source = 0
	WifiScanResults_Network_SCAN_2_4GHZ WifiScanResults_Network_Source = 1
	WifiScanResults_Network_SCAN_5GHZ   WifiScanResults_Network_Source = 2
)

// Enum value maps for WifiScanResults_Network_Source.
var (
	WifiScanResults_Network_Source_name = map[int32]string{
		0: "UNKNOWN",
		1: "SCAN_2_4GHZ",
		2: "SCAN_5GHZ",
	}
	WifiScanResults_Network_Source_value = map[string]int32{
		"UNKNOWN":     0,
		"SCAN_2_4GHZ": 1,
		"SCAN_5GHZ":   2,
	}
)

func (x WifiScanResults_Network_Source) Enum() *WifiScanResults_Network_Source {
	p := new(WifiScanResults_Network_Source)
	*p = x
	return p
}

func (x WifiScanResults_Network_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiScanResults_Network_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_proto_enumTypes[3].Descriptor()
}

func (WifiScanResults_Network_Source) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_proto_enumTypes[3]
}

func (x WifiScanResults_Network_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiScanResults_Network_Source.Descriptor instead.
func (WifiScanResults_Network_Source) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{33, 0, 0}
}

type WifiNetwork_Band int32

const (
	WifiNetwork_WIFI_UNKNOWN WifiNetwork_Band = 0
	WifiNetwork_WIFI_2_4GHZ  WifiNetwork_Band = 1
	WifiNetwork_WIFI_5GHZ    WifiNetwork_Band = 2
)

// Enum value maps for WifiNetwork_Band.
var (
	WifiNetwork_Band_name = map[int32]string{
		0: "WIFI_UNKNOWN",
		1: "WIFI_2_4GHZ",
		2: "WIFI_5GHZ",
	}
	WifiNetwork_Band_value = map[string]int32{
		"WIFI_UNKNOWN": 0,
		"WIFI_2_4GHZ":  1,
		"WIFI_5GHZ":    2,
	}
)

func (x WifiNetwork_Band) Enum() *WifiNetwork_Band {
	p := new(WifiNetwork_Band)
	*p = x
	return p
}

func (x WifiNetwork_Band) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiNetwork_Band) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_proto_enumTypes[4].Descriptor()
}

func (WifiNetwork_Band) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_proto_enumTypes[4]
}

func (x WifiNetwork_Band) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiNetwork_Band.Descriptor instead.
func (WifiNetwork_Band) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{34, 0}
}

type WifiClients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clients []*WifiClient `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients,omitempty"`
}

func (x *WifiClients) Reset() {
	*x = WifiClients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiClients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiClients) ProtoMessage() {}

func (x *WifiClients) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiClients.ProtoReflect.Descriptor instead.
func (*WifiClients) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{0}
}

func (x *WifiClients) GetClients() []*WifiClient {
	if x != nil {
		return x.Clients
	}
	return nil
}

type ToController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*ToController_Clients
	//	*ToController_MeshJoin
	Message isToController_Message `protobuf_oneof:"message"`
}

func (x *ToController) Reset() {
	*x = ToController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToController) ProtoMessage() {}

func (x *ToController) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToController.ProtoReflect.Descriptor instead.
func (*ToController) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{1}
}

func (m *ToController) GetMessage() isToController_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ToController) GetClients() *WifiClients {
	if x, ok := x.GetMessage().(*ToController_Clients); ok {
		return x.Clients
	}
	return nil
}

func (x *ToController) GetMeshJoin() *WifiMeshJoin {
	if x, ok := x.GetMessage().(*ToController_MeshJoin); ok {
		return x.MeshJoin
	}
	return nil
}

type isToController_Message interface {
	isToController_Message()
}

type ToController_Clients struct {
	Clients *WifiClients `protobuf:"bytes,1,opt,name=clients,proto3,oneof"`
}

type ToController_MeshJoin struct {
	MeshJoin *WifiMeshJoin `protobuf:"bytes,2,opt,name=mesh_join,json=meshJoin,proto3,oneof"`
}

func (*ToController_Clients) isToController_Message() {}

func (*ToController_MeshJoin) isToController_Message() {}

type WifiMeshJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Incarnation uint64 `protobuf:"varint,1,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
}

func (x *WifiMeshJoin) Reset() {
	*x = WifiMeshJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiMeshJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiMeshJoin) ProtoMessage() {}

func (x *WifiMeshJoin) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiMeshJoin.ProtoReflect.Descriptor instead.
func (*WifiMeshJoin) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{2}
}

func (x *WifiMeshJoin) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

type FromController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*FromController_WifiConfig
	Message isFromController_Message `protobuf_oneof:"message"`
}

func (x *FromController) Reset() {
	*x = FromController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromController) ProtoMessage() {}

func (x *FromController) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromController.ProtoReflect.Descriptor instead.
func (*FromController) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{3}
}

func (m *FromController) GetMessage() isFromController_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *FromController) GetWifiConfig() *WifiConfig {
	if x, ok := x.GetMessage().(*FromController_WifiConfig); ok {
		return x.WifiConfig
	}
	return nil
}

type isFromController_Message interface {
	isFromController_Message()
}

type FromController_WifiConfig struct {
	WifiConfig *WifiConfig `protobuf:"bytes,1,opt,name=wifi_config,json=wifiConfig,proto3,oneof"`
}

func (*FromController_WifiConfig) isFromController_Message() {}

type WifiSetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WifiConfig *WifiConfig `protobuf:"bytes,1,opt,name=wifi_config,json=wifiConfig,proto3" json:"wifi_config,omitempty"`
}

func (x *WifiSetConfigRequest) Reset() {
	*x = WifiSetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetConfigRequest) ProtoMessage() {}

func (x *WifiSetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetConfigRequest.ProtoReflect.Descriptor instead.
func (*WifiSetConfigRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{4}
}

func (x *WifiSetConfigRequest) GetWifiConfig() *WifiConfig {
	if x != nil {
		return x.WifiConfig
	}
	return nil
}

type WifiSetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedWifiConfig *WifiConfig `protobuf:"bytes,1,opt,name=updated_wifi_config,json=updatedWifiConfig,proto3" json:"updated_wifi_config,omitempty"`
}

func (x *WifiSetConfigResponse) Reset() {
	*x = WifiSetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetConfigResponse) ProtoMessage() {}

func (x *WifiSetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetConfigResponse.ProtoReflect.Descriptor instead.
func (*WifiSetConfigResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{5}
}

func (x *WifiSetConfigResponse) GetUpdatedWifiConfig() *WifiConfig {
	if x != nil {
		return x.UpdatedWifiConfig
	}
	return nil
}

type WifiGetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiGetConfigRequest) Reset() {
	*x = WifiGetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetConfigRequest) ProtoMessage() {}

func (x *WifiGetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetConfigRequest.ProtoReflect.Descriptor instead.
func (*WifiGetConfigRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{6}
}

type WifiGetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WifiConfig *WifiConfig `protobuf:"bytes,1,opt,name=wifi_config,json=wifiConfig,proto3" json:"wifi_config,omitempty"`
}

func (x *WifiGetConfigResponse) Reset() {
	*x = WifiGetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetConfigResponse) ProtoMessage() {}

func (x *WifiGetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetConfigResponse.ProtoReflect.Descriptor instead.
func (*WifiGetConfigResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{7}
}

func (x *WifiGetConfigResponse) GetWifiConfig() *WifiConfig {
	if x != nil {
		return x.WifiConfig
	}
	return nil
}

type WifiSetMeshDeviceTrustRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string   `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Auth     MeshAuth `protobuf:"varint,2,opt,name=auth,proto3,enum=SpaceX.API.Device.MeshAuth" json:"auth,omitempty"`
}

func (x *WifiSetMeshDeviceTrustRequest) Reset() {
	*x = WifiSetMeshDeviceTrustRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetMeshDeviceTrustRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetMeshDeviceTrustRequest) ProtoMessage() {}

func (x *WifiSetMeshDeviceTrustRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetMeshDeviceTrustRequest.ProtoReflect.Descriptor instead.
func (*WifiSetMeshDeviceTrustRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{8}
}

func (x *WifiSetMeshDeviceTrustRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *WifiSetMeshDeviceTrustRequest) GetAuth() MeshAuth {
	if x != nil {
		return x.Auth
	}
	return MeshAuth_MESH_AUTH_UNKNOWN
}

type WifiSetMeshDeviceTrustResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiSetMeshDeviceTrustResponse) Reset() {
	*x = WifiSetMeshDeviceTrustResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetMeshDeviceTrustResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetMeshDeviceTrustResponse) ProtoMessage() {}

func (x *WifiSetMeshDeviceTrustResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetMeshDeviceTrustResponse.ProtoReflect.Descriptor instead.
func (*WifiSetMeshDeviceTrustResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{9}
}

type WifiSetMeshConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeshConfig *MeshConfig `protobuf:"bytes,1,opt,name=mesh_config,json=meshConfig,proto3" json:"mesh_config,omitempty"`
	DeviceId   string      `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *WifiSetMeshConfigRequest) Reset() {
	*x = WifiSetMeshConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetMeshConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetMeshConfigRequest) ProtoMessage() {}

func (x *WifiSetMeshConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetMeshConfigRequest.ProtoReflect.Descriptor instead.
func (*WifiSetMeshConfigRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{10}
}

func (x *WifiSetMeshConfigRequest) GetMeshConfig() *MeshConfig {
	if x != nil {
		return x.MeshConfig
	}
	return nil
}

func (x *WifiSetMeshConfigRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type WifiSetMeshConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiSetMeshConfigResponse) Reset() {
	*x = WifiSetMeshConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetMeshConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetMeshConfigResponse) ProtoMessage() {}

func (x *WifiSetMeshConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetMeshConfigResponse.ProtoReflect.Descriptor instead.
func (*WifiSetMeshConfigResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{11}
}

type WifiGetClientsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiGetClientsRequest) Reset() {
	*x = WifiGetClientsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetClientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetClientsRequest) ProtoMessage() {}

func (x *WifiGetClientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetClientsRequest.ProtoReflect.Descriptor instead.
func (*WifiGetClientsRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{12}
}

type WifiGetClientsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clients        []*WifiClient `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients,omitempty"`
	HasClientIndex bool          `protobuf:"varint,2,opt,name=has_client_index,json=hasClientIndex,proto3" json:"has_client_index,omitempty"`
	ClientIndex    int32         `protobuf:"varint,3,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
}

func (x *WifiGetClientsResponse) Reset() {
	*x = WifiGetClientsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetClientsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetClientsResponse) ProtoMessage() {}

func (x *WifiGetClientsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetClientsResponse.ProtoReflect.Descriptor instead.
func (*WifiGetClientsResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{13}
}

func (x *WifiGetClientsResponse) GetClients() []*WifiClient {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *WifiGetClientsResponse) GetHasClientIndex() bool {
	if x != nil {
		return x.HasClientIndex
	}
	return false
}

func (x *WifiGetClientsResponse) GetClientIndex() int32 {
	if x != nil {
		return x.ClientIndex
	}
	return 0
}

type WifiGetClientHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (x *WifiGetClientHistoryRequest) Reset() {
	*x = WifiGetClientHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetClientHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetClientHistoryRequest) ProtoMessage() {}

func (x *WifiGetClientHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetClientHistoryRequest.ProtoReflect.Descriptor instead.
func (*WifiGetClientHistoryRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{14}
}

func (x *WifiGetClientHistoryRequest) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type WifiGetClientHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current           uint64                                           `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	TxThroughputMbps  []float32                                        `protobuf:"fixed32,2,rep,packed,name=tx_throughput_mbps,json=txThroughputMbps,proto3" json:"tx_throughput_mbps,omitempty"`
	RxThroughputMbps  []float32                                        `protobuf:"fixed32,3,rep,packed,name=rx_throughput_mbps,json=rxThroughputMbps,proto3" json:"rx_throughput_mbps,omitempty"`
	ThroughputLimited []WifiGetClientHistoryResponse_WifiLimitedReason `protobuf:"varint,4,rep,packed,name=throughput_limited,json=throughputLimited,proto3,enum=SpaceX.API.Device.WifiGetClientHistoryResponse_WifiLimitedReason" json:"throughput_limited,omitempty"`
	RxRateMbps        []float32                                        `protobuf:"fixed32,5,rep,packed,name=rx_rate_mbps,json=rxRateMbps,proto3" json:"rx_rate_mbps,omitempty"`
	Rssi              []byte                                           `protobuf:"bytes,6,opt,name=rssi,proto3" json:"rssi,omitempty"`
}

func (x *WifiGetClientHistoryResponse) Reset() {
	*x = WifiGetClientHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetClientHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetClientHistoryResponse) ProtoMessage() {}

func (x *WifiGetClientHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetClientHistoryResponse.ProtoReflect.Descriptor instead.
func (*WifiGetClientHistoryResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{15}
}

func (x *WifiGetClientHistoryResponse) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *WifiGetClientHistoryResponse) GetTxThroughputMbps() []float32 {
	if x != nil {
		return x.TxThroughputMbps
	}
	return nil
}

func (x *WifiGetClientHistoryResponse) GetRxThroughputMbps() []float32 {
	if x != nil {
		return x.RxThroughputMbps
	}
	return nil
}

func (x *WifiGetClientHistoryResponse) GetThroughputLimited() []WifiGetClientHistoryResponse_WifiLimitedReason {
	if x != nil {
		return x.ThroughputLimited
	}
	return nil
}

func (x *WifiGetClientHistoryResponse) GetRxRateMbps() []float32 {
	if x != nil {
		return x.RxRateMbps
	}
	return nil
}

func (x *WifiGetClientHistoryResponse) GetRssi() []byte {
	if x != nil {
		return x.Rssi
	}
	return nil
}

type WifiGetHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current       uint64    `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	PingDropRate  []float32 `protobuf:"fixed32,1001,rep,packed,name=ping_drop_rate,json=pingDropRate,proto3" json:"ping_drop_rate,omitempty"`
	PingLatencyMs []float32 `protobuf:"fixed32,1002,rep,packed,name=ping_latency_ms,json=pingLatencyMs,proto3" json:"ping_latency_ms,omitempty"`
}

func (x *WifiGetHistoryResponse) Reset() {
	*x = WifiGetHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetHistoryResponse) ProtoMessage() {}

func (x *WifiGetHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetHistoryResponse.ProtoReflect.Descriptor instead.
func (*WifiGetHistoryResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{16}
}

func (x *WifiGetHistoryResponse) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *WifiGetHistoryResponse) GetPingDropRate() []float32 {
	if x != nil {
		return x.PingDropRate
	}
	return nil
}

func (x *WifiGetHistoryResponse) GetPingLatencyMs() []float32 {
	if x != nil {
		return x.PingLatencyMs
	}
	return nil
}

type WifiNewClientConnectedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client *WifiClient `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *WifiNewClientConnectedEvent) Reset() {
	*x = WifiNewClientConnectedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiNewClientConnectedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiNewClientConnectedEvent) ProtoMessage() {}

func (x *WifiNewClientConnectedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiNewClientConnectedEvent.ProtoReflect.Descriptor instead.
func (*WifiNewClientConnectedEvent) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{17}
}

func (x *WifiNewClientConnectedEvent) GetClient() *WifiClient {
	if x != nil {
		return x.Client
	}
	return nil
}

type WifiClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Domain             string               `protobuf:"bytes,22,opt,name=domain,proto3" json:"domain,omitempty"`
	MacAddress         string               `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	IpAddress          string               `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	SignalStrength     float32              `protobuf:"fixed32,4,opt,name=signal_strength,json=signalStrength,proto3" json:"signal_strength,omitempty"`
	ChannelWidth       uint32               `protobuf:"varint,12,opt,name=channel_width,json=channelWidth,proto3" json:"channel_width,omitempty"`
	RxStats            *WifiClient_RxStats  `protobuf:"bytes,5,opt,name=rx_stats,json=rxStats,proto3" json:"rx_stats,omitempty"`
	TxStats            *WifiClient_TxStats  `protobuf:"bytes,6,opt,name=tx_stats,json=txStats,proto3" json:"tx_stats,omitempty"`
	AssociatedTimeS    uint32               `protobuf:"varint,7,opt,name=associated_time_s,json=associatedTimeS,proto3" json:"associated_time_s,omitempty"`
	ModeStr            string               `protobuf:"bytes,8,opt,name=mode_str,json=modeStr,proto3" json:"mode_str,omitempty"`
	Iface              WifiClient_Interface `protobuf:"varint,9,opt,name=iface,proto3,enum=SpaceX.API.Device.WifiClient_Interface" json:"iface,omitempty"`
	Snr                float32              `protobuf:"fixed32,10,opt,name=snr,proto3" json:"snr,omitempty"`
	Psmode             int32                `protobuf:"varint,11,opt,name=psmode,proto3" json:"psmode,omitempty"`
	UpstreamMacAddress string               `protobuf:"bytes,13,opt,name=upstream_mac_address,json=upstreamMacAddress,proto3" json:"upstream_mac_address,omitempty"`
	Role               WifiClient_Role      `protobuf:"varint,14,opt,name=role,proto3,enum=SpaceX.API.Device.WifiClient_Role" json:"role,omitempty"`
	DeviceId           string               `protobuf:"bytes,15,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	SwqChecks          uint32               `protobuf:"varint,16,opt,name=swq_checks,json=swqChecks,proto3" json:"swq_checks,omitempty"`
	SwqChecksNonEmpty  uint32               `protobuf:"varint,17,opt,name=swq_checks_non_empty,json=swqChecksNonEmpty,proto3" json:"swq_checks_non_empty,omitempty"`
	MibSteerState      uint32               `protobuf:"varint,18,opt,name=mib_steer_state,json=mibSteerState,proto3" json:"mib_steer_state,omitempty"`
	MibSteerMethod     uint32               `protobuf:"varint,19,opt,name=mib_steer_method,json=mibSteerMethod,proto3" json:"mib_steer_method,omitempty"`
	BtmRequests        uint32               `protobuf:"varint,20,opt,name=btm_requests,json=btmRequests,proto3" json:"btm_requests,omitempty"`
	BtmRequestsSuccess uint32               `protobuf:"varint,21,opt,name=btm_requests_success,json=btmRequestsSuccess,proto3" json:"btm_requests_success,omitempty"`
}

func (x *WifiClient) Reset() {
	*x = WifiClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiClient) ProtoMessage() {}

func (x *WifiClient) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiClient.ProtoReflect.Descriptor instead.
func (*WifiClient) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{18}
}

func (x *WifiClient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WifiClient) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *WifiClient) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *WifiClient) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *WifiClient) GetSignalStrength() float32 {
	if x != nil {
		return x.SignalStrength
	}
	return 0
}

func (x *WifiClient) GetChannelWidth() uint32 {
	if x != nil {
		return x.ChannelWidth
	}
	return 0
}

func (x *WifiClient) GetRxStats() *WifiClient_RxStats {
	if x != nil {
		return x.RxStats
	}
	return nil
}

func (x *WifiClient) GetTxStats() *WifiClient_TxStats {
	if x != nil {
		return x.TxStats
	}
	return nil
}

func (x *WifiClient) GetAssociatedTimeS() uint32 {
	if x != nil {
		return x.AssociatedTimeS
	}
	return 0
}

func (x *WifiClient) GetModeStr() string {
	if x != nil {
		return x.ModeStr
	}
	return ""
}

func (x *WifiClient) GetIface() WifiClient_Interface {
	if x != nil {
		return x.Iface
	}
	return WifiClient_UNKNOWN
}

func (x *WifiClient) GetSnr() float32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *WifiClient) GetPsmode() int32 {
	if x != nil {
		return x.Psmode
	}
	return 0
}

func (x *WifiClient) GetUpstreamMacAddress() string {
	if x != nil {
		return x.UpstreamMacAddress
	}
	return ""
}

func (x *WifiClient) GetRole() WifiClient_Role {
	if x != nil {
		return x.Role
	}
	return WifiClient_ROLE_UNKNOWN
}

func (x *WifiClient) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *WifiClient) GetSwqChecks() uint32 {
	if x != nil {
		return x.SwqChecks
	}
	return 0
}

func (x *WifiClient) GetSwqChecksNonEmpty() uint32 {
	if x != nil {
		return x.SwqChecksNonEmpty
	}
	return 0
}

func (x *WifiClient) GetMibSteerState() uint32 {
	if x != nil {
		return x.MibSteerState
	}
	return 0
}

func (x *WifiClient) GetMibSteerMethod() uint32 {
	if x != nil {
		return x.MibSteerMethod
	}
	return 0
}

func (x *WifiClient) GetBtmRequests() uint32 {
	if x != nil {
		return x.BtmRequests
	}
	return 0
}

func (x *WifiClient) GetBtmRequestsSuccess() uint32 {
	if x != nil {
		return x.BtmRequestsSuccess
	}
	return 0
}

type WifiSetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skip            bool   `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`
	NetworkName     string `protobuf:"bytes,2,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	NetworkPassword string `protobuf:"bytes,3,opt,name=network_password,json=networkPassword,proto3" json:"network_password,omitempty"`
}

func (x *WifiSetupRequest) Reset() {
	*x = WifiSetupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetupRequest) ProtoMessage() {}

func (x *WifiSetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetupRequest.ProtoReflect.Descriptor instead.
func (*WifiSetupRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{19}
}

func (x *WifiSetupRequest) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *WifiSetupRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *WifiSetupRequest) GetNetworkPassword() string {
	if x != nil {
		return x.NetworkPassword
	}
	return ""
}

type WifiSetupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiSetupResponse) Reset() {
	*x = WifiSetupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiSetupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiSetupResponse) ProtoMessage() {}

func (x *WifiSetupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiSetupResponse.ProtoReflect.Descriptor instead.
func (*WifiSetupResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{20}
}

type WifiBandStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChanBusyTimeFraction float32 `protobuf:"fixed32,1,opt,name=chan_busy_time_fraction,json=chanBusyTimeFraction,proto3" json:"chan_busy_time_fraction,omitempty"`
	TxAirTimeFraction    float32 `protobuf:"fixed32,2,opt,name=tx_air_time_fraction,json=txAirTimeFraction,proto3" json:"tx_air_time_fraction,omitempty"`
	RxAirTimeFraction    float32 `protobuf:"fixed32,3,opt,name=rx_air_time_fraction,json=rxAirTimeFraction,proto3" json:"rx_air_time_fraction,omitempty"`
	ObssAirTimeFraction  float32 `protobuf:"fixed32,4,opt,name=obss_air_time_fraction,json=obssAirTimeFraction,proto3" json:"obss_air_time_fraction,omitempty"`
	EdccaAirTimeFraction float32 `protobuf:"fixed32,5,opt,name=edcca_air_time_fraction,json=edccaAirTimeFraction,proto3" json:"edcca_air_time_fraction,omitempty"`
}

func (x *WifiBandStatus) Reset() {
	*x = WifiBandStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiBandStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiBandStatus) ProtoMessage() {}

func (x *WifiBandStatus) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiBandStatus.ProtoReflect.Descriptor instead.
func (*WifiBandStatus) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{21}
}

func (x *WifiBandStatus) GetChanBusyTimeFraction() float32 {
	if x != nil {
		return x.ChanBusyTimeFraction
	}
	return 0
}

func (x *WifiBandStatus) GetTxAirTimeFraction() float32 {
	if x != nil {
		return x.TxAirTimeFraction
	}
	return 0
}

func (x *WifiBandStatus) GetRxAirTimeFraction() float32 {
	if x != nil {
		return x.RxAirTimeFraction
	}
	return 0
}

func (x *WifiBandStatus) GetObssAirTimeFraction() float32 {
	if x != nil {
		return x.ObssAirTimeFraction
	}
	return 0
}

func (x *WifiBandStatus) GetEdccaAirTimeFraction() float32 {
	if x != nil {
		return x.EdccaAirTimeFraction
	}
	return 0
}

type WifiAlerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThermalThrottle      bool `protobuf:"varint,1,opt,name=thermal_throttle,json=thermalThrottle,proto3" json:"thermal_throttle,omitempty"`
	InstallPending       bool `protobuf:"varint,2,opt,name=install_pending,json=installPending,proto3" json:"install_pending,omitempty"`
	FreshlyFused         bool `protobuf:"varint,3,opt,name=freshly_fused,json=freshlyFused,proto3" json:"freshly_fused,omitempty"`
	LanEthSlowLink_10    bool `protobuf:"varint,4,opt,name=lan_eth_slow_link_10,json=lanEthSlowLink10,proto3" json:"lan_eth_slow_link_10,omitempty"`
	LanEthSlowLink_100   bool `protobuf:"varint,5,opt,name=lan_eth_slow_link_100,json=lanEthSlowLink100,proto3" json:"lan_eth_slow_link_100,omitempty"`
	WanEthPoorConnection bool `protobuf:"varint,10,opt,name=wan_eth_poor_connection,json=wanEthPoorConnection,proto3" json:"wan_eth_poor_connection,omitempty"`
}

func (x *WifiAlerts) Reset() {
	*x = WifiAlerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiAlerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiAlerts) ProtoMessage() {}

func (x *WifiAlerts) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiAlerts.ProtoReflect.Descriptor instead.
func (*WifiAlerts) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{22}
}

func (x *WifiAlerts) GetThermalThrottle() bool {
	if x != nil {
		return x.ThermalThrottle
	}
	return false
}

func (x *WifiAlerts) GetInstallPending() bool {
	if x != nil {
		return x.InstallPending
	}
	return false
}

func (x *WifiAlerts) GetFreshlyFused() bool {
	if x != nil {
		return x.FreshlyFused
	}
	return false
}

func (x *WifiAlerts) GetLanEthSlowLink_10() bool {
	if x != nil {
		return x.LanEthSlowLink_10
	}
	return false
}

func (x *WifiAlerts) GetLanEthSlowLink_100() bool {
	if x != nil {
		return x.LanEthSlowLink_100
	}
	return false
}

func (x *WifiAlerts) GetWanEthPoorConnection() bool {
	if x != nil {
		return x.WanEthPoorConnection
	}
	return false
}

type WifiGetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceInfo           *DeviceInfo  `protobuf:"bytes,3,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	DeviceState          *DeviceState `protobuf:"bytes,4,opt,name=device_state,json=deviceState,proto3" json:"device_state,omitempty"`
	CaptivePortalEnabled bool         `protobuf:"varint,1,opt,name=captive_portal_enabled,json=captivePortalEnabled,proto3" json:"captive_portal_enabled,omitempty"`
	Ipv4WanAddress       string       `protobuf:"bytes,1003,opt,name=ipv4_wan_address,json=ipv4WanAddress,proto3" json:"ipv4_wan_address,omitempty"`
	PingDropRate         float32      `protobuf:"fixed32,1004,opt,name=ping_drop_rate,json=pingDropRate,proto3" json:"ping_drop_rate,omitempty"`
	PingLatencyMs        float32      `protobuf:"fixed32,1005,opt,name=ping_latency_ms,json=pingLatencyMs,proto3" json:"ping_latency_ms,omitempty"`
	DishPingDropRate     float32      `protobuf:"fixed32,1012,opt,name=dish_ping_drop_rate,json=dishPingDropRate,proto3" json:"dish_ping_drop_rate,omitempty"`
	DishPingLatencyMs    float32      `protobuf:"fixed32,1013,opt,name=dish_ping_latency_ms,json=dishPingLatencyMs,proto3" json:"dish_ping_latency_ms,omitempty"`
	PopPingDropRate      float32      `protobuf:"fixed32,1014,opt,name=pop_ping_drop_rate,json=popPingDropRate,proto3" json:"pop_ping_drop_rate,omitempty"`
	PopPingLatencyMs     float32      `protobuf:"fixed32,1015,opt,name=pop_ping_latency_ms,json=popPingLatencyMs,proto3" json:"pop_ping_latency_ms,omitempty"`
	// Deprecated: Do not use.
	Rf_2GhzStatus *WifiBandStatus `protobuf:"bytes,1008,opt,name=rf_2ghz_status,json=rf2ghzStatus,proto3" json:"rf_2ghz_status,omitempty"`
	// Deprecated: Do not use.
	Rf_5GhzStatus *WifiBandStatus `protobuf:"bytes,1009,opt,name=rf_5ghz_status,json=rf5ghzStatus,proto3" json:"rf_5ghz_status,omitempty"`
	Alerts        *WifiAlerts     `protobuf:"bytes,1010,opt,name=alerts,proto3" json:"alerts,omitempty"`
	IsAviation    bool            `protobuf:"varint,1011,opt,name=is_aviation,json=isAviation,proto3" json:"is_aviation,omitempty"`
}

func (x *WifiGetStatusResponse) Reset() {
	*x = WifiGetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetStatusResponse) ProtoMessage() {}

func (x *WifiGetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetStatusResponse.ProtoReflect.Descriptor instead.
func (*WifiGetStatusResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{23}
}

func (x *WifiGetStatusResponse) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *WifiGetStatusResponse) GetDeviceState() *DeviceState {
	if x != nil {
		return x.DeviceState
	}
	return nil
}

func (x *WifiGetStatusResponse) GetCaptivePortalEnabled() bool {
	if x != nil {
		return x.CaptivePortalEnabled
	}
	return false
}

func (x *WifiGetStatusResponse) GetIpv4WanAddress() string {
	if x != nil {
		return x.Ipv4WanAddress
	}
	return ""
}

func (x *WifiGetStatusResponse) GetPingDropRate() float32 {
	if x != nil {
		return x.PingDropRate
	}
	return 0
}

func (x *WifiGetStatusResponse) GetPingLatencyMs() float32 {
	if x != nil {
		return x.PingLatencyMs
	}
	return 0
}

func (x *WifiGetStatusResponse) GetDishPingDropRate() float32 {
	if x != nil {
		return x.DishPingDropRate
	}
	return 0
}

func (x *WifiGetStatusResponse) GetDishPingLatencyMs() float32 {
	if x != nil {
		return x.DishPingLatencyMs
	}
	return 0
}

func (x *WifiGetStatusResponse) GetPopPingDropRate() float32 {
	if x != nil {
		return x.PopPingDropRate
	}
	return 0
}

func (x *WifiGetStatusResponse) GetPopPingLatencyMs() float32 {
	if x != nil {
		return x.PopPingLatencyMs
	}
	return 0
}

// Deprecated: Do not use.
func (x *WifiGetStatusResponse) GetRf_2GhzStatus() *WifiBandStatus {
	if x != nil {
		return x.Rf_2GhzStatus
	}
	return nil
}

// Deprecated: Do not use.
func (x *WifiGetStatusResponse) GetRf_5GhzStatus() *WifiBandStatus {
	if x != nil {
		return x.Rf_5GhzStatus
	}
	return nil
}

func (x *WifiGetStatusResponse) GetAlerts() *WifiAlerts {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *WifiGetStatusResponse) GetIsAviation() bool {
	if x != nil {
		return x.IsAviation
	}
	return false
}

type WifiAuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge *SignedData `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *WifiAuthenticateRequest) Reset() {
	*x = WifiAuthenticateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiAuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiAuthenticateRequest) ProtoMessage() {}

func (x *WifiAuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiAuthenticateRequest.ProtoReflect.Descriptor instead.
func (*WifiAuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{24}
}

func (x *WifiAuthenticateRequest) GetChallenge() *SignedData {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type WifiAuthenticateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wifi *ChallengeResponse `protobuf:"bytes,1,opt,name=wifi,proto3" json:"wifi,omitempty"`
	Dish *ChallengeResponse `protobuf:"bytes,2,opt,name=dish,proto3" json:"dish,omitempty"`
}

func (x *WifiAuthenticateResponse) Reset() {
	*x = WifiAuthenticateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiAuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiAuthenticateResponse) ProtoMessage() {}

func (x *WifiAuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiAuthenticateResponse.ProtoReflect.Descriptor instead.
func (*WifiAuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{25}
}

func (x *WifiAuthenticateResponse) GetWifi() *ChallengeResponse {
	if x != nil {
		return x.Wifi
	}
	return nil
}

func (x *WifiAuthenticateResponse) GetDish() *ChallengeResponse {
	if x != nil {
		return x.Dish
	}
	return nil
}

type WifiAccountBondingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DishId string `protobuf:"bytes,1,opt,name=dish_id,json=dishId,proto3" json:"dish_id,omitempty"`
}

func (x *WifiAccountBondingEvent) Reset() {
	*x = WifiAccountBondingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiAccountBondingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiAccountBondingEvent) ProtoMessage() {}

func (x *WifiAccountBondingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiAccountBondingEvent.ProtoReflect.Descriptor instead.
func (*WifiAccountBondingEvent) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{26}
}

func (x *WifiAccountBondingEvent) GetDishId() string {
	if x != nil {
		return x.DishId
	}
	return ""
}

type WifiNewPeerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *WifiNewPeerEvent) Reset() {
	*x = WifiNewPeerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiNewPeerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiNewPeerEvent) ProtoMessage() {}

func (x *WifiNewPeerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiNewPeerEvent.ProtoReflect.Descriptor instead.
func (*WifiNewPeerEvent) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{27}
}

func (x *WifiNewPeerEvent) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

type PingMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatencyMeanMs               float32 `protobuf:"fixed32,1,opt,name=latency_mean_ms,json=latencyMeanMs,proto3" json:"latency_mean_ms,omitempty"`
	LatencyStddevMs             float32 `protobuf:"fixed32,2,opt,name=latency_stddev_ms,json=latencyStddevMs,proto3" json:"latency_stddev_ms,omitempty"`
	LatencyMeanMs_5M            float32 `protobuf:"fixed32,3,opt,name=latency_mean_ms_5m,json=latencyMeanMs5m,proto3" json:"latency_mean_ms_5m,omitempty"`
	LatencyMeanMs_1H            float32 `protobuf:"fixed32,4,opt,name=latency_mean_ms_1h,json=latencyMeanMs1h,proto3" json:"latency_mean_ms_1h,omitempty"`
	LatencyMeanMs_1D            float32 `protobuf:"fixed32,5,opt,name=latency_mean_ms_1d,json=latencyMeanMs1d,proto3" json:"latency_mean_ms_1d,omitempty"`
	DropRate                    float32 `protobuf:"fixed32,6,opt,name=drop_rate,json=dropRate,proto3" json:"drop_rate,omitempty"`
	DropRate_5M                 float32 `protobuf:"fixed32,7,opt,name=drop_rate_5m,json=dropRate5m,proto3" json:"drop_rate_5m,omitempty"`
	DropRate_1H                 float32 `protobuf:"fixed32,8,opt,name=drop_rate_1h,json=dropRate1h,proto3" json:"drop_rate_1h,omitempty"`
	DropRate_1D                 float32 `protobuf:"fixed32,9,opt,name=drop_rate_1d,json=dropRate1d,proto3" json:"drop_rate_1d,omitempty"`
	SecondsSinceLastSuccess     float32 `protobuf:"fixed32,10,opt,name=seconds_since_last_success,json=secondsSinceLastSuccess,proto3" json:"seconds_since_last_success,omitempty"`
	SecondsSinceLast_1SOutage   float32 `protobuf:"fixed32,11,opt,name=seconds_since_last_1s_outage,json=secondsSinceLast1sOutage,proto3" json:"seconds_since_last_1s_outage,omitempty"`
	SecondsSinceLast_2SOutage   float32 `protobuf:"fixed32,15,opt,name=seconds_since_last_2s_outage,json=secondsSinceLast2sOutage,proto3" json:"seconds_since_last_2s_outage,omitempty"`
	SecondsSinceLast_5SOutage   float32 `protobuf:"fixed32,12,opt,name=seconds_since_last_5s_outage,json=secondsSinceLast5sOutage,proto3" json:"seconds_since_last_5s_outage,omitempty"`
	SecondsSinceLast_15SOutage  float32 `protobuf:"fixed32,18,opt,name=seconds_since_last_15s_outage,json=secondsSinceLast15sOutage,proto3" json:"seconds_since_last_15s_outage,omitempty"`
	SecondsSinceLast_60SOutage  float32 `protobuf:"fixed32,19,opt,name=seconds_since_last_60s_outage,json=secondsSinceLast60sOutage,proto3" json:"seconds_since_last_60s_outage,omitempty"`
	SecondsSinceLast_300SOutage float32 `protobuf:"fixed32,20,opt,name=seconds_since_last_300s_outage,json=secondsSinceLast300sOutage,proto3" json:"seconds_since_last_300s_outage,omitempty"`
	HappyHours_1S_1D            float32 `protobuf:"fixed32,13,opt,name=happy_hours_1s_1d,json=happyHours1s1d,proto3" json:"happy_hours_1s_1d,omitempty"`
	HappyHours_2S_1D            float32 `protobuf:"fixed32,16,opt,name=happy_hours_2s_1d,json=happyHours2s1d,proto3" json:"happy_hours_2s_1d,omitempty"`
	HappyHours_5S_1D            float32 `protobuf:"fixed32,14,opt,name=happy_hours_5s_1d,json=happyHours5s1d,proto3" json:"happy_hours_5s_1d,omitempty"`
}

func (x *PingMetrics) Reset() {
	*x = PingMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMetrics) ProtoMessage() {}

func (x *PingMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMetrics.ProtoReflect.Descriptor instead.
func (*PingMetrics) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{28}
}

func (x *PingMetrics) GetLatencyMeanMs() float32 {
	if x != nil {
		return x.LatencyMeanMs
	}
	return 0
}

func (x *PingMetrics) GetLatencyStddevMs() float32 {
	if x != nil {
		return x.LatencyStddevMs
	}
	return 0
}

func (x *PingMetrics) GetLatencyMeanMs_5M() float32 {
	if x != nil {
		return x.LatencyMeanMs_5M
	}
	return 0
}

func (x *PingMetrics) GetLatencyMeanMs_1H() float32 {
	if x != nil {
		return x.LatencyMeanMs_1H
	}
	return 0
}

func (x *PingMetrics) GetLatencyMeanMs_1D() float32 {
	if x != nil {
		return x.LatencyMeanMs_1D
	}
	return 0
}

func (x *PingMetrics) GetDropRate() float32 {
	if x != nil {
		return x.DropRate
	}
	return 0
}

func (x *PingMetrics) GetDropRate_5M() float32 {
	if x != nil {
		return x.DropRate_5M
	}
	return 0
}

func (x *PingMetrics) GetDropRate_1H() float32 {
	if x != nil {
		return x.DropRate_1H
	}
	return 0
}

func (x *PingMetrics) GetDropRate_1D() float32 {
	if x != nil {
		return x.DropRate_1D
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLastSuccess() float32 {
	if x != nil {
		return x.SecondsSinceLastSuccess
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLast_1SOutage() float32 {
	if x != nil {
		return x.SecondsSinceLast_1SOutage
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLast_2SOutage() float32 {
	if x != nil {
		return x.SecondsSinceLast_2SOutage
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLast_5SOutage() float32 {
	if x != nil {
		return x.SecondsSinceLast_5SOutage
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLast_15SOutage() float32 {
	if x != nil {
		return x.SecondsSinceLast_15SOutage
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLast_60SOutage() float32 {
	if x != nil {
		return x.SecondsSinceLast_60SOutage
	}
	return 0
}

func (x *PingMetrics) GetSecondsSinceLast_300SOutage() float32 {
	if x != nil {
		return x.SecondsSinceLast_300SOutage
	}
	return 0
}

func (x *PingMetrics) GetHappyHours_1S_1D() float32 {
	if x != nil {
		return x.HappyHours_1S_1D
	}
	return 0
}

func (x *PingMetrics) GetHappyHours_2S_1D() float32 {
	if x != nil {
		return x.HappyHours_2S_1D
	}
	return 0
}

func (x *PingMetrics) GetHappyHours_5S_1D() float32 {
	if x != nil {
		return x.HappyHours_5S_1D
	}
	return 0
}

type WifiGetPingMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiGetPingMetricsRequest) Reset() {
	*x = WifiGetPingMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetPingMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetPingMetricsRequest) ProtoMessage() {}

func (x *WifiGetPingMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetPingMetricsRequest.ProtoReflect.Descriptor instead.
func (*WifiGetPingMetricsRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{29}
}

type WifiGetPingMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Internet *PingMetrics `protobuf:"bytes,1,opt,name=internet,proto3" json:"internet,omitempty"`
}

func (x *WifiGetPingMetricsResponse) Reset() {
	*x = WifiGetPingMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetPingMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetPingMetricsResponse) ProtoMessage() {}

func (x *WifiGetPingMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetPingMetricsResponse.ProtoReflect.Descriptor instead.
func (*WifiGetPingMetricsResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{30}
}

func (x *WifiGetPingMetricsResponse) GetInternet() *PingMetrics {
	if x != nil {
		return x.Internet
	}
	return nil
}

type WifiGetDiagnosticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WifiGetDiagnosticsRequest) Reset() {
	*x = WifiGetDiagnosticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetDiagnosticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetDiagnosticsRequest) ProtoMessage() {}

func (x *WifiGetDiagnosticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetDiagnosticsRequest.ProtoReflect.Descriptor instead.
func (*WifiGetDiagnosticsRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{31}
}

type WifiGetDiagnosticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkScan  *WifiScanResults `protobuf:"bytes,1,opt,name=network_scan,json=networkScan,proto3" json:"network_scan,omitempty"`
	WifiNetworks []*WifiNetwork   `protobuf:"bytes,2,rep,name=wifi_networks,json=wifiNetworks,proto3" json:"wifi_networks,omitempty"`
}

func (x *WifiGetDiagnosticsResponse) Reset() {
	*x = WifiGetDiagnosticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetDiagnosticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetDiagnosticsResponse) ProtoMessage() {}

func (x *WifiGetDiagnosticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetDiagnosticsResponse.ProtoReflect.Descriptor instead.
func (*WifiGetDiagnosticsResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{32}
}

func (x *WifiGetDiagnosticsResponse) GetNetworkScan() *WifiScanResults {
	if x != nil {
		return x.NetworkScan
	}
	return nil
}

func (x *WifiGetDiagnosticsResponse) GetWifiNetworks() []*WifiNetwork {
	if x != nil {
		return x.WifiNetworks
	}
	return nil
}

type WifiScanResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks []*WifiScanResults_Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *WifiScanResults) Reset() {
	*x = WifiScanResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiScanResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiScanResults) ProtoMessage() {}

func (x *WifiScanResults) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiScanResults.ProtoReflect.Descriptor instead.
func (*WifiScanResults) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{33}
}

func (x *WifiScanResults) GetNetworks() []*WifiScanResults_Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

type WifiNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Band              WifiNetwork_Band `protobuf:"varint,1,opt,name=band,proto3,enum=SpaceX.API.Device.WifiNetwork_Band" json:"band,omitempty"`
	Ssid              string           `protobuf:"bytes,2,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Channel           uint32           `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`
	EncryptionTypeStr string           `protobuf:"bytes,4,opt,name=encryption_type_str,json=encryptionTypeStr,proto3" json:"encryption_type_str,omitempty"`
}

func (x *WifiNetwork) Reset() {
	*x = WifiNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiNetwork) ProtoMessage() {}

func (x *WifiNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiNetwork.ProtoReflect.Descriptor instead.
func (*WifiNetwork) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{34}
}

func (x *WifiNetwork) GetBand() WifiNetwork_Band {
	if x != nil {
		return x.Band
	}
	return WifiNetwork_WIFI_UNKNOWN
}

func (x *WifiNetwork) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *WifiNetwork) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *WifiNetwork) GetEncryptionTypeStr() string {
	if x != nil {
		return x.EncryptionTypeStr
	}
	return ""
}

type WifiPersistentStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FactoryResetButton               *WifiPersistentStats_Event `protobuf:"bytes,1,opt,name=factory_reset_button,json=factoryResetButton,proto3" json:"factory_reset_button,omitempty"`
	FactoryResetPlugUnplug           *WifiPersistentStats_Event `protobuf:"bytes,2,opt,name=factory_reset_plug_unplug,json=factoryResetPlugUnplug,proto3" json:"factory_reset_plug_unplug,omitempty"`
	FactoryResetCommand              *WifiPersistentStats_Event `protobuf:"bytes,3,opt,name=factory_reset_command,json=factoryResetCommand,proto3" json:"factory_reset_command,omitempty"`
	FactoryResetFailedLoadWifiConfig *WifiPersistentStats_Event `protobuf:"bytes,4,opt,name=factory_reset_failed_load_wifi_config,json=factoryResetFailedLoadWifiConfig,proto3" json:"factory_reset_failed_load_wifi_config,omitempty"`
	RebootFromSoftwareUpdate         *WifiPersistentStats_Event `protobuf:"bytes,5,opt,name=reboot_from_software_update,json=rebootFromSoftwareUpdate,proto3" json:"reboot_from_software_update,omitempty"`
}

func (x *WifiPersistentStats) Reset() {
	*x = WifiPersistentStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiPersistentStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiPersistentStats) ProtoMessage() {}

func (x *WifiPersistentStats) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiPersistentStats.ProtoReflect.Descriptor instead.
func (*WifiPersistentStats) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{35}
}

func (x *WifiPersistentStats) GetFactoryResetButton() *WifiPersistentStats_Event {
	if x != nil {
		return x.FactoryResetButton
	}
	return nil
}

func (x *WifiPersistentStats) GetFactoryResetPlugUnplug() *WifiPersistentStats_Event {
	if x != nil {
		return x.FactoryResetPlugUnplug
	}
	return nil
}

func (x *WifiPersistentStats) GetFactoryResetCommand() *WifiPersistentStats_Event {
	if x != nil {
		return x.FactoryResetCommand
	}
	return nil
}

func (x *WifiPersistentStats) GetFactoryResetFailedLoadWifiConfig() *WifiPersistentStats_Event {
	if x != nil {
		return x.FactoryResetFailedLoadWifiConfig
	}
	return nil
}

func (x *WifiPersistentStats) GetRebootFromSoftwareUpdate() *WifiPersistentStats_Event {
	if x != nil {
		return x.RebootFromSoftwareUpdate
	}
	return nil
}

type WifiGetPersistentStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *WifiPersistentStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *WifiGetPersistentStatsResponse) Reset() {
	*x = WifiGetPersistentStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiGetPersistentStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiGetPersistentStatsResponse) ProtoMessage() {}

func (x *WifiGetPersistentStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiGetPersistentStatsResponse.ProtoReflect.Descriptor instead.
func (*WifiGetPersistentStatsResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{36}
}

func (x *WifiGetPersistentStatsResponse) GetStats() *WifiPersistentStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type StarlinkRouterHourlyMetricsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TimestampDate                       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=timestamp_date,json=timestampDate,proto3" json:"timestamp_date,omitempty"`
	TimestampHour                       *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=timestamp_hour,json=timestampHour,proto3" json:"timestamp_hour,omitempty"`
	SysHwGen                            *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=sys_hw_gen,json=sysHwGen,proto3" json:"sys_hw_gen,omitempty"`
	SysSw                               *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=sys_sw,json=sysSw,proto3" json:"sys_sw,omitempty"`
	SysCountry                          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=sys_country,json=sysCountry,proto3" json:"sys_country,omitempty"`
	SysIsDev                            *wrapperspb.BoolValue   `protobuf:"bytes,7,opt,name=sys_is_dev,json=sysIsDev,proto3" json:"sys_is_dev,omitempty"`
	SysAllocFds                         *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=sys_alloc_fds,json=sysAllocFds,proto3" json:"sys_alloc_fds,omitempty"`
	SysCpuUsage                         *wrapperspb.FloatValue  `protobuf:"bytes,9,opt,name=sys_cpu_usage,json=sysCpuUsage,proto3" json:"sys_cpu_usage,omitempty"`
	SysMemFreeKb                        *wrapperspb.FloatValue  `protobuf:"bytes,10,opt,name=sys_mem_free_kb,json=sysMemFreeKb,proto3" json:"sys_mem_free_kb,omitempty"`
	SysBootcount                        *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=sys_bootcount,json=sysBootcount,proto3" json:"sys_bootcount,omitempty"`
	SysPartitionsEqual                  *wrapperspb.BoolValue   `protobuf:"bytes,12,opt,name=sys_partitions_equal,json=sysPartitionsEqual,proto3" json:"sys_partitions_equal,omitempty"`
	SysUptimeSeconds                    *wrapperspb.UInt32Value `protobuf:"bytes,13,opt,name=sys_uptime_seconds,json=sysUptimeSeconds,proto3" json:"sys_uptime_seconds,omitempty"`
	SysAntiRollbackVersion              *wrapperspb.Int32Value  `protobuf:"bytes,14,opt,name=sys_anti_rollback_version,json=sysAntiRollbackVersion,proto3" json:"sys_anti_rollback_version,omitempty"`
	Radios_2GhzChannel                  *wrapperspb.UInt32Value `protobuf:"bytes,100,opt,name=radios_2ghz_channel,json=radios2ghzChannel,proto3" json:"radios_2ghz_channel,omitempty"`
	Radios_2GhzAntenna1Rssi             *wrapperspb.FloatValue  `protobuf:"bytes,101,opt,name=radios_2ghz_antenna1_rssi,json=radios2ghzAntenna1Rssi,proto3" json:"radios_2ghz_antenna1_rssi,omitempty"`
	Radios_2GhzAntenna2Rssi             *wrapperspb.FloatValue  `protobuf:"bytes,102,opt,name=radios_2ghz_antenna2_rssi,json=radios2ghzAntenna2Rssi,proto3" json:"radios_2ghz_antenna2_rssi,omitempty"`
	Radios_2GhzAntenna3Rssi             *wrapperspb.FloatValue  `protobuf:"bytes,103,opt,name=radios_2ghz_antenna3_rssi,json=radios2ghzAntenna3Rssi,proto3" json:"radios_2ghz_antenna3_rssi,omitempty"`
	Radios_2GhzIfaceCount               *wrapperspb.UInt32Value `protobuf:"bytes,104,opt,name=radios_2ghz_iface_count,json=radios2ghzIfaceCount,proto3" json:"radios_2ghz_iface_count,omitempty"`
	Radios_2GhzChanBusyFraction         *wrapperspb.FloatValue  `protobuf:"bytes,105,opt,name=radios_2ghz_chan_busy_fraction,json=radios2ghzChanBusyFraction,proto3" json:"radios_2ghz_chan_busy_fraction,omitempty"`
	Radios_2GhzEdccaFraction            *wrapperspb.FloatValue  `protobuf:"bytes,106,opt,name=radios_2ghz_edcca_fraction,json=radios2ghzEdccaFraction,proto3" json:"radios_2ghz_edcca_fraction,omitempty"`
	Radios_2GhzOverlappingBssFraction   *wrapperspb.FloatValue  `protobuf:"bytes,107,opt,name=radios_2ghz_overlapping_bss_fraction,json=radios2ghzOverlappingBssFraction,proto3" json:"radios_2ghz_overlapping_bss_fraction,omitempty"`
	Radios_2GhzRxBytes                  *wrapperspb.UInt32Value `protobuf:"bytes,108,opt,name=radios_2ghz_rx_bytes,json=radios2ghzRxBytes,proto3" json:"radios_2ghz_rx_bytes,omitempty"`
	Radios_2GhzRxPackets                *wrapperspb.UInt32Value `protobuf:"bytes,109,opt,name=radios_2ghz_rx_packets,json=radios2ghzRxPackets,proto3" json:"radios_2ghz_rx_packets,omitempty"`
	Radios_2GhzRxErrors                 *wrapperspb.UInt32Value `protobuf:"bytes,110,opt,name=radios_2ghz_rx_errors,json=radios2ghzRxErrors,proto3" json:"radios_2ghz_rx_errors,omitempty"`
	Radios_2GhzRxFrameErrors            *wrapperspb.UInt32Value `protobuf:"bytes,111,opt,name=radios_2ghz_rx_frame_errors,json=radios2ghzRxFrameErrors,proto3" json:"radios_2ghz_rx_frame_errors,omitempty"`
	Radios_2GhzRxPacketErrorRate        *wrapperspb.FloatValue  `protobuf:"bytes,112,opt,name=radios_2ghz_rx_packet_error_rate,json=radios2ghzRxPacketErrorRate,proto3" json:"radios_2ghz_rx_packet_error_rate,omitempty"`
	Radios_2GhzRxAirtimeFraction        *wrapperspb.FloatValue  `protobuf:"bytes,113,opt,name=radios_2ghz_rx_airtime_fraction,json=radios2ghzRxAirtimeFraction,proto3" json:"radios_2ghz_rx_airtime_fraction,omitempty"`
	Radios_2GhzTxBytes                  *wrapperspb.UInt32Value `protobuf:"bytes,114,opt,name=radios_2ghz_tx_bytes,json=radios2ghzTxBytes,proto3" json:"radios_2ghz_tx_bytes,omitempty"`
	Radios_2GhzTxPackets                *wrapperspb.UInt32Value `protobuf:"bytes,115,opt,name=radios_2ghz_tx_packets,json=radios2ghzTxPackets,proto3" json:"radios_2ghz_tx_packets,omitempty"`
	Radios_2GhzTxErrors                 *wrapperspb.UInt32Value `protobuf:"bytes,116,opt,name=radios_2ghz_tx_errors,json=radios2ghzTxErrors,proto3" json:"radios_2ghz_tx_errors,omitempty"`
	Radios_2GhzTxPacketErrorRate        *wrapperspb.FloatValue  `protobuf:"bytes,117,opt,name=radios_2ghz_tx_packet_error_rate,json=radios2ghzTxPacketErrorRate,proto3" json:"radios_2ghz_tx_packet_error_rate,omitempty"`
	Radios_2GhzTxAirtimeFraction        *wrapperspb.FloatValue  `protobuf:"bytes,118,opt,name=radios_2ghz_tx_airtime_fraction,json=radios2ghzTxAirtimeFraction,proto3" json:"radios_2ghz_tx_airtime_fraction,omitempty"`
	Radios_5GhzChannel                  *wrapperspb.UInt32Value `protobuf:"bytes,119,opt,name=radios_5ghz_channel,json=radios5ghzChannel,proto3" json:"radios_5ghz_channel,omitempty"`
	Radios_5GhzAntenna1Rssi             *wrapperspb.FloatValue  `protobuf:"bytes,120,opt,name=radios_5ghz_antenna1_rssi,json=radios5ghzAntenna1Rssi,proto3" json:"radios_5ghz_antenna1_rssi,omitempty"`
	Radios_5GhzAntenna2Rssi             *wrapperspb.FloatValue  `protobuf:"bytes,121,opt,name=radios_5ghz_antenna2_rssi,json=radios5ghzAntenna2Rssi,proto3" json:"radios_5ghz_antenna2_rssi,omitempty"`
	Radios_5GhzAntenna3Rssi             *wrapperspb.FloatValue  `protobuf:"bytes,122,opt,name=radios_5ghz_antenna3_rssi,json=radios5ghzAntenna3Rssi,proto3" json:"radios_5ghz_antenna3_rssi,omitempty"`
	Radios_5GhzIfaceCount               *wrapperspb.UInt32Value `protobuf:"bytes,123,opt,name=radios_5ghz_iface_count,json=radios5ghzIfaceCount,proto3" json:"radios_5ghz_iface_count,omitempty"`
	Radios_5GhzChanBusyFraction         *wrapperspb.FloatValue  `protobuf:"bytes,124,opt,name=radios_5ghz_chan_busy_fraction,json=radios5ghzChanBusyFraction,proto3" json:"radios_5ghz_chan_busy_fraction,omitempty"`
	Radios_5GhzEdccaFraction            *wrapperspb.FloatValue  `protobuf:"bytes,125,opt,name=radios_5ghz_edcca_fraction,json=radios5ghzEdccaFraction,proto3" json:"radios_5ghz_edcca_fraction,omitempty"`
	Radios_5GhzOverlappingBssFraction   *wrapperspb.FloatValue  `protobuf:"bytes,126,opt,name=radios_5ghz_overlapping_bss_fraction,json=radios5ghzOverlappingBssFraction,proto3" json:"radios_5ghz_overlapping_bss_fraction,omitempty"`
	Radios_5GhzRxBytes                  *wrapperspb.UInt32Value `protobuf:"bytes,127,opt,name=radios_5ghz_rx_bytes,json=radios5ghzRxBytes,proto3" json:"radios_5ghz_rx_bytes,omitempty"`
	Radios_5GhzRxPackets                *wrapperspb.UInt32Value `protobuf:"bytes,128,opt,name=radios_5ghz_rx_packets,json=radios5ghzRxPackets,proto3" json:"radios_5ghz_rx_packets,omitempty"`
	Radios_5GhzRxErrors                 *wrapperspb.UInt32Value `protobuf:"bytes,129,opt,name=radios_5ghz_rx_errors,json=radios5ghzRxErrors,proto3" json:"radios_5ghz_rx_errors,omitempty"`
	Radios_5GhzRxFrameErrors            *wrapperspb.UInt32Value `protobuf:"bytes,130,opt,name=radios_5ghz_rx_frame_errors,json=radios5ghzRxFrameErrors,proto3" json:"radios_5ghz_rx_frame_errors,omitempty"`
	Radios_5GhzRxPacketErrorRate        *wrapperspb.FloatValue  `protobuf:"bytes,131,opt,name=radios_5ghz_rx_packet_error_rate,json=radios5ghzRxPacketErrorRate,proto3" json:"radios_5ghz_rx_packet_error_rate,omitempty"`
	Radios_5GhzRxAirtimeFraction        *wrapperspb.FloatValue  `protobuf:"bytes,132,opt,name=radios_5ghz_rx_airtime_fraction,json=radios5ghzRxAirtimeFraction,proto3" json:"radios_5ghz_rx_airtime_fraction,omitempty"`
	Radios_5GhzTxBytes                  *wrapperspb.UInt32Value `protobuf:"bytes,133,opt,name=radios_5ghz_tx_bytes,json=radios5ghzTxBytes,proto3" json:"radios_5ghz_tx_bytes,omitempty"`
	Radios_5GhzTxPackets                *wrapperspb.UInt32Value `protobuf:"bytes,134,opt,name=radios_5ghz_tx_packets,json=radios5ghzTxPackets,proto3" json:"radios_5ghz_tx_packets,omitempty"`
	Radios_5GhzTxErrors                 *wrapperspb.UInt32Value `protobuf:"bytes,135,opt,name=radios_5ghz_tx_errors,json=radios5ghzTxErrors,proto3" json:"radios_5ghz_tx_errors,omitempty"`
	Radios_5GhzTxPacketErrorRate        *wrapperspb.FloatValue  `protobuf:"bytes,136,opt,name=radios_5ghz_tx_packet_error_rate,json=radios5ghzTxPacketErrorRate,proto3" json:"radios_5ghz_tx_packet_error_rate,omitempty"`
	Radios_5GhzTxAirtimeFraction        *wrapperspb.FloatValue  `protobuf:"bytes,137,opt,name=radios_5ghz_tx_airtime_fraction,json=radios5ghzTxAirtimeFraction,proto3" json:"radios_5ghz_tx_airtime_fraction,omitempty"`
	Radios_2GhzThermalTemp              *wrapperspb.FloatValue  `protobuf:"bytes,200,opt,name=radios_2ghz_thermal_temp,json=radios2ghzThermalTemp,proto3" json:"radios_2ghz_thermal_temp,omitempty"`
	Radios_5GhzThermalTemp              *wrapperspb.FloatValue  `protobuf:"bytes,201,opt,name=radios_5ghz_thermal_temp,json=radios5ghzThermalTemp,proto3" json:"radios_5ghz_thermal_temp,omitempty"`
	Radios_2GhzThermalDutyCycle         *wrapperspb.FloatValue  `protobuf:"bytes,202,opt,name=radios_2ghz_thermal_duty_cycle,json=radios2ghzThermalDutyCycle,proto3" json:"radios_2ghz_thermal_duty_cycle,omitempty"`
	Radios_5GhzThermalDutyCycle         *wrapperspb.FloatValue  `protobuf:"bytes,203,opt,name=radios_5ghz_thermal_duty_cycle,json=radios5ghzThermalDutyCycle,proto3" json:"radios_5ghz_thermal_duty_cycle,omitempty"`
	Radios_2GhzThermalThrottledSeconds  *wrapperspb.UInt32Value `protobuf:"bytes,204,opt,name=radios_2ghz_thermal_throttled_seconds,json=radios2ghzThermalThrottledSeconds,proto3" json:"radios_2ghz_thermal_throttled_seconds,omitempty"`
	Radios_5GhzThermalThrottledSeconds  *wrapperspb.UInt32Value `protobuf:"bytes,205,opt,name=radios_5ghz_thermal_throttled_seconds,json=radios5ghzThermalThrottledSeconds,proto3" json:"radios_5ghz_thermal_throttled_seconds,omitempty"`
	IfacesLanEthRxBytes                 *wrapperspb.UInt32Value `protobuf:"bytes,300,opt,name=ifaces_lan_eth_rx_bytes,json=ifacesLanEthRxBytes,proto3" json:"ifaces_lan_eth_rx_bytes,omitempty"`
	IfacesLanEthRxPackets               *wrapperspb.UInt32Value `protobuf:"bytes,301,opt,name=ifaces_lan_eth_rx_packets,json=ifacesLanEthRxPackets,proto3" json:"ifaces_lan_eth_rx_packets,omitempty"`
	IfacesLanEthRxErrors                *wrapperspb.UInt32Value `protobuf:"bytes,302,opt,name=ifaces_lan_eth_rx_errors,json=ifacesLanEthRxErrors,proto3" json:"ifaces_lan_eth_rx_errors,omitempty"`
	IfacesLanEthRxFrameErrors           *wrapperspb.UInt32Value `protobuf:"bytes,303,opt,name=ifaces_lan_eth_rx_frame_errors,json=ifacesLanEthRxFrameErrors,proto3" json:"ifaces_lan_eth_rx_frame_errors,omitempty"`
	IfacesLanEthTxBytes                 *wrapperspb.UInt32Value `protobuf:"bytes,304,opt,name=ifaces_lan_eth_tx_bytes,json=ifacesLanEthTxBytes,proto3" json:"ifaces_lan_eth_tx_bytes,omitempty"`
	IfacesLanEthTxPackets               *wrapperspb.UInt32Value `protobuf:"bytes,305,opt,name=ifaces_lan_eth_tx_packets,json=ifacesLanEthTxPackets,proto3" json:"ifaces_lan_eth_tx_packets,omitempty"`
	IfacesLanEthTxErrors                *wrapperspb.UInt32Value `protobuf:"bytes,306,opt,name=ifaces_lan_eth_tx_errors,json=ifacesLanEthTxErrors,proto3" json:"ifaces_lan_eth_tx_errors,omitempty"`
	IfacesWanEthRxBytes                 *wrapperspb.UInt32Value `protobuf:"bytes,307,opt,name=ifaces_wan_eth_rx_bytes,json=ifacesWanEthRxBytes,proto3" json:"ifaces_wan_eth_rx_bytes,omitempty"`
	IfacesWanEthRxPackets               *wrapperspb.UInt32Value `protobuf:"bytes,308,opt,name=ifaces_wan_eth_rx_packets,json=ifacesWanEthRxPackets,proto3" json:"ifaces_wan_eth_rx_packets,omitempty"`
	IfacesWanEthRxErrors                *wrapperspb.UInt32Value `protobuf:"bytes,309,opt,name=ifaces_wan_eth_rx_errors,json=ifacesWanEthRxErrors,proto3" json:"ifaces_wan_eth_rx_errors,omitempty"`
	IfacesWanEthRxFrameErrors           *wrapperspb.UInt32Value `protobuf:"bytes,310,opt,name=ifaces_wan_eth_rx_frame_errors,json=ifacesWanEthRxFrameErrors,proto3" json:"ifaces_wan_eth_rx_frame_errors,omitempty"`
	IfacesWanEthTxBytes                 *wrapperspb.UInt32Value `protobuf:"bytes,311,opt,name=ifaces_wan_eth_tx_bytes,json=ifacesWanEthTxBytes,proto3" json:"ifaces_wan_eth_tx_bytes,omitempty"`
	IfacesWanEthTxPackets               *wrapperspb.UInt32Value `protobuf:"bytes,312,opt,name=ifaces_wan_eth_tx_packets,json=ifacesWanEthTxPackets,proto3" json:"ifaces_wan_eth_tx_packets,omitempty"`
	IfacesWanEthTxErrors                *wrapperspb.UInt32Value `protobuf:"bytes,313,opt,name=ifaces_wan_eth_tx_errors,json=ifacesWanEthTxErrors,proto3" json:"ifaces_wan_eth_tx_errors,omitempty"`
	Clients                             *wrapperspb.UInt32Value `protobuf:"bytes,400,opt,name=clients,proto3" json:"clients,omitempty"`
	Clients_2Ghz                        *wrapperspb.UInt32Value `protobuf:"bytes,401,opt,name=clients_2ghz,json=clients2ghz,proto3" json:"clients_2ghz,omitempty"`
	Clients_5Ghz                        *wrapperspb.UInt32Value `protobuf:"bytes,402,opt,name=clients_5ghz,json=clients5ghz,proto3" json:"clients_5ghz,omitempty"`
	ClientsEth                          *wrapperspb.UInt32Value `protobuf:"bytes,403,opt,name=clients_eth,json=clientsEth,proto3" json:"clients_eth,omitempty"`
	ClientsRepeater                     *wrapperspb.UInt32Value `protobuf:"bytes,404,opt,name=clients_repeater,json=clientsRepeater,proto3" json:"clients_repeater,omitempty"`
	ClientsRepeater_2Ghz                *wrapperspb.UInt32Value `protobuf:"bytes,405,opt,name=clients_repeater_2ghz,json=clientsRepeater2ghz,proto3" json:"clients_repeater_2ghz,omitempty"`
	ClientsRepeater_5Ghz                *wrapperspb.UInt32Value `protobuf:"bytes,406,opt,name=clients_repeater_5ghz,json=clientsRepeater5ghz,proto3" json:"clients_repeater_5ghz,omitempty"`
	ClientsRepeaterEth                  *wrapperspb.UInt32Value `protobuf:"bytes,407,opt,name=clients_repeater_eth,json=clientsRepeaterEth,proto3" json:"clients_repeater_eth,omitempty"`
	MeshHops                            *wrapperspb.UInt32Value `protobuf:"bytes,408,opt,name=mesh_hops,json=meshHops,proto3" json:"mesh_hops,omitempty"`
	MeshOneHopRssiAvg_2Ghz              *wrapperspb.FloatValue  `protobuf:"bytes,409,opt,name=mesh_one_hop_rssi_avg_2ghz,json=meshOneHopRssiAvg2ghz,proto3" json:"mesh_one_hop_rssi_avg_2ghz,omitempty"`
	MeshOneHopRssiAvg_5Ghz              *wrapperspb.FloatValue  `protobuf:"bytes,410,opt,name=mesh_one_hop_rssi_avg_5ghz,json=meshOneHopRssiAvg5ghz,proto3" json:"mesh_one_hop_rssi_avg_5ghz,omitempty"`
	MeshTwoHopRssiAvg_2Ghz              *wrapperspb.FloatValue  `protobuf:"bytes,411,opt,name=mesh_two_hop_rssi_avg_2ghz,json=meshTwoHopRssiAvg2ghz,proto3" json:"mesh_two_hop_rssi_avg_2ghz,omitempty"`
	MeshTwoHopRssiAvg_5Ghz              *wrapperspb.FloatValue  `protobuf:"bytes,412,opt,name=mesh_two_hop_rssi_avg_5ghz,json=meshTwoHopRssiAvg5ghz,proto3" json:"mesh_two_hop_rssi_avg_5ghz,omitempty"`
	PingSecondsSinceLast_1SOutage       *wrapperspb.FloatValue  `protobuf:"bytes,600,opt,name=ping_seconds_since_last_1s_outage,json=pingSecondsSinceLast1sOutage,proto3" json:"ping_seconds_since_last_1s_outage,omitempty"`
	PingSecondsSinceLast_2SOutage       *wrapperspb.FloatValue  `protobuf:"bytes,601,opt,name=ping_seconds_since_last_2s_outage,json=pingSecondsSinceLast2sOutage,proto3" json:"ping_seconds_since_last_2s_outage,omitempty"`
	PingSecondsSinceLast_5SOutage       *wrapperspb.FloatValue  `protobuf:"bytes,602,opt,name=ping_seconds_since_last_5s_outage,json=pingSecondsSinceLast5sOutage,proto3" json:"ping_seconds_since_last_5s_outage,omitempty"`
	PingSecondsSinceLast_60SOutage      *wrapperspb.FloatValue  `protobuf:"bytes,603,opt,name=ping_seconds_since_last_60s_outage,json=pingSecondsSinceLast60sOutage,proto3" json:"ping_seconds_since_last_60s_outage,omitempty"`
	PingSecondsSinceLast_300SOutage     *wrapperspb.FloatValue  `protobuf:"bytes,604,opt,name=ping_seconds_since_last_300s_outage,json=pingSecondsSinceLast300sOutage,proto3" json:"ping_seconds_since_last_300s_outage,omitempty"`
	PingDropRate                        *wrapperspb.FloatValue  `protobuf:"bytes,605,opt,name=ping_drop_rate,json=pingDropRate,proto3" json:"ping_drop_rate,omitempty"`
	PingDropRateLast_1H                 *wrapperspb.FloatValue  `protobuf:"bytes,606,opt,name=ping_drop_rate_last_1h,json=pingDropRateLast1h,proto3" json:"ping_drop_rate_last_1h,omitempty"`
	PingLatency                         *wrapperspb.FloatValue  `protobuf:"bytes,607,opt,name=ping_latency,json=pingLatency,proto3" json:"ping_latency,omitempty"`
	PingDishSecondsSinceLast_1SOutage   *wrapperspb.FloatValue  `protobuf:"bytes,610,opt,name=ping_dish_seconds_since_last_1s_outage,json=pingDishSecondsSinceLast1sOutage,proto3" json:"ping_dish_seconds_since_last_1s_outage,omitempty"`
	PingDishSecondsSinceLast_2SOutage   *wrapperspb.FloatValue  `protobuf:"bytes,611,opt,name=ping_dish_seconds_since_last_2s_outage,json=pingDishSecondsSinceLast2sOutage,proto3" json:"ping_dish_seconds_since_last_2s_outage,omitempty"`
	PingDishSecondsSinceLast_5SOutage   *wrapperspb.FloatValue  `protobuf:"bytes,612,opt,name=ping_dish_seconds_since_last_5s_outage,json=pingDishSecondsSinceLast5sOutage,proto3" json:"ping_dish_seconds_since_last_5s_outage,omitempty"`
	PingDishSecondsSinceLast_60SOutage  *wrapperspb.FloatValue  `protobuf:"bytes,613,opt,name=ping_dish_seconds_since_last_60s_outage,json=pingDishSecondsSinceLast60sOutage,proto3" json:"ping_dish_seconds_since_last_60s_outage,omitempty"`
	PingDishSecondsSinceLast_300SOutage *wrapperspb.FloatValue  `protobuf:"bytes,614,opt,name=ping_dish_seconds_since_last_300s_outage,json=pingDishSecondsSinceLast300sOutage,proto3" json:"ping_dish_seconds_since_last_300s_outage,omitempty"`
	PingDishDropRate                    *wrapperspb.FloatValue  `protobuf:"bytes,615,opt,name=ping_dish_drop_rate,json=pingDishDropRate,proto3" json:"ping_dish_drop_rate,omitempty"`
	PingDishDropRateLast_1H             *wrapperspb.FloatValue  `protobuf:"bytes,616,opt,name=ping_dish_drop_rate_last_1h,json=pingDishDropRateLast1h,proto3" json:"ping_dish_drop_rate_last_1h,omitempty"`
	PingDishLatency                     *wrapperspb.FloatValue  `protobuf:"bytes,617,opt,name=ping_dish_latency,json=pingDishLatency,proto3" json:"ping_dish_latency,omitempty"`
	ClientSpeedtestRouterDownloadMbps   *wrapperspb.FloatValue  `protobuf:"bytes,700,opt,name=client_speedtest_router_download_mbps,json=clientSpeedtestRouterDownloadMbps,proto3" json:"client_speedtest_router_download_mbps,omitempty"`
	ClientSpeedtestRouterUploadMbps     *wrapperspb.FloatValue  `protobuf:"bytes,701,opt,name=client_speedtest_router_upload_mbps,json=clientSpeedtestRouterUploadMbps,proto3" json:"client_speedtest_router_upload_mbps,omitempty"`
	ClientSpeedtestRouterRssi           *wrapperspb.FloatValue  `protobuf:"bytes,702,opt,name=client_speedtest_router_rssi,json=clientSpeedtestRouterRssi,proto3" json:"client_speedtest_router_rssi,omitempty"`
	ClientSpeedtestWifiDownloadMbps     *wrapperspb.FloatValue  `protobuf:"bytes,703,opt,name=client_speedtest_wifi_download_mbps,json=clientSpeedtestWifiDownloadMbps,proto3" json:"client_speedtest_wifi_download_mbps,omitempty"`
	ClientSpeedtestWifiUploadMbps       *wrapperspb.FloatValue  `protobuf:"bytes,704,opt,name=client_speedtest_wifi_upload_mbps,json=clientSpeedtestWifiUploadMbps,proto3" json:"client_speedtest_wifi_upload_mbps,omitempty"`
	ClientSpeedtestClientDownloadMbps   *wrapperspb.FloatValue  `protobuf:"bytes,705,opt,name=client_speedtest_client_download_mbps,json=clientSpeedtestClientDownloadMbps,proto3" json:"client_speedtest_client_download_mbps,omitempty"`
	ClientSpeedtestClientUploadMbps     *wrapperspb.FloatValue  `protobuf:"bytes,706,opt,name=client_speedtest_client_upload_mbps,json=clientSpeedtestClientUploadMbps,proto3" json:"client_speedtest_client_upload_mbps,omitempty"`
	ClientSpeedtestClientRssi           *wrapperspb.FloatValue  `protobuf:"bytes,707,opt,name=client_speedtest_client_rssi,json=clientSpeedtestClientRssi,proto3" json:"client_speedtest_client_rssi,omitempty"`
	ClientSpeedtestClientIface          *wrapperspb.UInt32Value `protobuf:"bytes,708,opt,name=client_speedtest_client_iface,json=clientSpeedtestClientIface,proto3" json:"client_speedtest_client_iface,omitempty"`
	ClientSpeedtestClientOui            *wrapperspb.StringValue `protobuf:"bytes,709,opt,name=client_speedtest_client_oui,json=clientSpeedtestClientOui,proto3" json:"client_speedtest_client_oui,omitempty"`
	ClientSpeedtestClientTxRate         *wrapperspb.UInt32Value `protobuf:"bytes,710,opt,name=client_speedtest_client_tx_rate,json=clientSpeedtestClientTxRate,proto3" json:"client_speedtest_client_tx_rate,omitempty"`
	ClientSpeedtestClientRxRate         *wrapperspb.UInt32Value `protobuf:"bytes,711,opt,name=client_speedtest_client_rx_rate,json=clientSpeedtestClientRxRate,proto3" json:"client_speedtest_client_rx_rate,omitempty"`
	ClientSpeedtestClientPlatformType   *wrapperspb.UInt32Value `protobuf:"bytes,712,opt,name=client_speedtest_client_platform_type,json=clientSpeedtestClientPlatformType,proto3" json:"client_speedtest_client_platform_type,omitempty"`
	SpeedtestTcp_8DownloadMbpsAvg       *wrapperspb.FloatValue  `protobuf:"bytes,800,opt,name=speedtest_tcp_8_download_mbps_avg,json=speedtestTcp8DownloadMbpsAvg,proto3" json:"speedtest_tcp_8_download_mbps_avg,omitempty"`
	SpeedtestTcp_8DownloadMbpsMax       *wrapperspb.FloatValue  `protobuf:"bytes,801,opt,name=speedtest_tcp_8_download_mbps_max,json=speedtestTcp8DownloadMbpsMax,proto3" json:"speedtest_tcp_8_download_mbps_max,omitempty"`
	SpeedtestTcp_8UploadMbpsAvg         *wrapperspb.FloatValue  `protobuf:"bytes,802,opt,name=speedtest_tcp_8_upload_mbps_avg,json=speedtestTcp8UploadMbpsAvg,proto3" json:"speedtest_tcp_8_upload_mbps_avg,omitempty"`
	SpeedtestTcp_8UploadMbpsMax         *wrapperspb.FloatValue  `protobuf:"bytes,803,opt,name=speedtest_tcp_8_upload_mbps_max,json=speedtestTcp8UploadMbpsMax,proto3" json:"speedtest_tcp_8_upload_mbps_max,omitempty"`
	SpeedtestTcp_64DownloadMbpsAvg      *wrapperspb.FloatValue  `protobuf:"bytes,804,opt,name=speedtest_tcp_64_download_mbps_avg,json=speedtestTcp64DownloadMbpsAvg,proto3" json:"speedtest_tcp_64_download_mbps_avg,omitempty"`
	SpeedtestTcp_64DownloadMbpsMax      *wrapperspb.FloatValue  `protobuf:"bytes,805,opt,name=speedtest_tcp_64_download_mbps_max,json=speedtestTcp64DownloadMbpsMax,proto3" json:"speedtest_tcp_64_download_mbps_max,omitempty"`
	SpeedtestTcp_64UploadMbpsAvg        *wrapperspb.FloatValue  `protobuf:"bytes,806,opt,name=speedtest_tcp_64_upload_mbps_avg,json=speedtestTcp64UploadMbpsAvg,proto3" json:"speedtest_tcp_64_upload_mbps_avg,omitempty"`
	SpeedtestTcp_64UploadMbpsMax        *wrapperspb.FloatValue  `protobuf:"bytes,807,opt,name=speedtest_tcp_64_upload_mbps_max,json=speedtestTcp64UploadMbpsMax,proto3" json:"speedtest_tcp_64_upload_mbps_max,omitempty"`
	DishCellId                          *wrapperspb.UInt32Value `protobuf:"bytes,900,opt,name=dish_cell_id,json=dishCellId,proto3" json:"dish_cell_id,omitempty"`
	ConfigSetupComplete                 *wrapperspb.BoolValue   `protobuf:"bytes,1000,opt,name=config_setup_complete,json=configSetupComplete,proto3" json:"config_setup_complete,omitempty"`
	ConfigBandsSplit                    *wrapperspb.BoolValue   `protobuf:"bytes,1001,opt,name=config_bands_split,json=configBandsSplit,proto3" json:"config_bands_split,omitempty"`
	ConfigIsRepeater                    *wrapperspb.BoolValue   `protobuf:"bytes,1002,opt,name=config_is_repeater,json=configIsRepeater,proto3" json:"config_is_repeater,omitempty"`
	ConfigOpenNetwork                   *wrapperspb.BoolValue   `protobuf:"bytes,1003,opt,name=config_open_network,json=configOpenNetwork,proto3" json:"config_open_network,omitempty"`
	ConfigIsAviation                    *wrapperspb.BoolValue   `protobuf:"bytes,1004,opt,name=config_is_aviation,json=configIsAviation,proto3" json:"config_is_aviation,omitempty"`
	ConfigSecureDns                     *wrapperspb.BoolValue   `protobuf:"bytes,1005,opt,name=config_secure_dns,json=configSecureDns,proto3" json:"config_secure_dns,omitempty"`
	ConfigLegacy                        *wrapperspb.BoolValue   `protobuf:"bytes,1006,opt,name=config_legacy,json=configLegacy,proto3" json:"config_legacy,omitempty"`
	ConfigApMode                        *wrapperspb.BoolValue   `protobuf:"bytes,1007,opt,name=config_ap_mode,json=configApMode,proto3" json:"config_ap_mode,omitempty"`
	ConfigDfsEnabled                    *wrapperspb.BoolValue   `protobuf:"bytes,1008,opt,name=config_dfs_enabled,json=configDfsEnabled,proto3" json:"config_dfs_enabled,omitempty"`
	ConfigNetworkNameIsDefault          *wrapperspb.BoolValue   `protobuf:"bytes,1009,opt,name=config_network_name_is_default,json=configNetworkNameIsDefault,proto3" json:"config_network_name_is_default,omitempty"`
	ConfigRemoteSshEnabled              *wrapperspb.BoolValue   `protobuf:"bytes,1010,opt,name=config_remote_ssh_enabled,json=configRemoteSshEnabled,proto3" json:"config_remote_ssh_enabled,omitempty"`
}

func (x *StarlinkRouterHourlyMetricsV2) Reset() {
	*x = StarlinkRouterHourlyMetricsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlinkRouterHourlyMetricsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlinkRouterHourlyMetricsV2) ProtoMessage() {}

func (x *StarlinkRouterHourlyMetricsV2) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlinkRouterHourlyMetricsV2.ProtoReflect.Descriptor instead.
func (*StarlinkRouterHourlyMetricsV2) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{37}
}

func (x *StarlinkRouterHourlyMetricsV2) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetTimestampDate() *wrapperspb.StringValue {
	if x != nil {
		return x.TimestampDate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetTimestampHour() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TimestampHour
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysHwGen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysHwGen
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysSw() *wrapperspb.StringValue {
	if x != nil {
		return x.SysSw
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysCountry() *wrapperspb.StringValue {
	if x != nil {
		return x.SysCountry
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysIsDev() *wrapperspb.BoolValue {
	if x != nil {
		return x.SysIsDev
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysAllocFds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysAllocFds
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysCpuUsage() *wrapperspb.FloatValue {
	if x != nil {
		return x.SysCpuUsage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysMemFreeKb() *wrapperspb.FloatValue {
	if x != nil {
		return x.SysMemFreeKb
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysBootcount() *wrapperspb.Int32Value {
	if x != nil {
		return x.SysBootcount
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysPartitionsEqual() *wrapperspb.BoolValue {
	if x != nil {
		return x.SysPartitionsEqual
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysUptimeSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysUptimeSeconds
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSysAntiRollbackVersion() *wrapperspb.Int32Value {
	if x != nil {
		return x.SysAntiRollbackVersion
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzChannel() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzChannel
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzAntenna1Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna1Rssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzAntenna2Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna2Rssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzAntenna3Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna3Rssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzIfaceCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzIfaceCount
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzChanBusyFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzChanBusyFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzEdccaFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzEdccaFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzOverlappingBssFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzOverlappingBssFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzRxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzRxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzRxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzRxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzRxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzRxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzRxFrameErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzRxFrameErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzRxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzRxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzRxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzRxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzTxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzTxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzTxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzTxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzTxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzTxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzTxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzTxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzTxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzTxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzChannel() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzChannel
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzAntenna1Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna1Rssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzAntenna2Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna2Rssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzAntenna3Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna3Rssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzIfaceCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzIfaceCount
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzChanBusyFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzChanBusyFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzEdccaFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzEdccaFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzOverlappingBssFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzOverlappingBssFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzRxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzRxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzRxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzRxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzRxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzRxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzRxFrameErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzRxFrameErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzRxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzRxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzRxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzRxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzTxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzTxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzTxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzTxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzTxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzTxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzTxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzTxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzTxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzTxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzThermalTemp() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzThermalTemp
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzThermalTemp() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzThermalTemp
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzThermalDutyCycle() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzThermalDutyCycle
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzThermalDutyCycle() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzThermalDutyCycle
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_2GhzThermalThrottledSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzThermalThrottledSeconds
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetRadios_5GhzThermalThrottledSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzThermalThrottledSeconds
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthRxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthRxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthRxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthRxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthRxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthRxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthRxFrameErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthRxFrameErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthTxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthTxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthTxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthTxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesLanEthTxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesLanEthTxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthRxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthRxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthRxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthRxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthRxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthRxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthRxFrameErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthRxFrameErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthTxBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthTxBytes
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthTxPackets() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthTxPackets
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetIfacesWanEthTxErrors() *wrapperspb.UInt32Value {
	if x != nil {
		return x.IfacesWanEthTxErrors
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClients() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClients_2Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients_2Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClients_5Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients_5Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientsEth() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsEth
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientsRepeater() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientsRepeater_2Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater_2Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientsRepeater_5Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater_5Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientsRepeaterEth() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeaterEth
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetMeshHops() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MeshHops
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetMeshOneHopRssiAvg_2Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshOneHopRssiAvg_2Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetMeshOneHopRssiAvg_5Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshOneHopRssiAvg_5Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetMeshTwoHopRssiAvg_2Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshTwoHopRssiAvg_2Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetMeshTwoHopRssiAvg_5Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshTwoHopRssiAvg_5Ghz
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingSecondsSinceLast_1SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_1SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingSecondsSinceLast_2SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_2SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingSecondsSinceLast_5SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_5SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingSecondsSinceLast_60SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_60SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingSecondsSinceLast_300SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_300SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDropRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDropRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDropRateLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDropRateLast_1H
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingLatency() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingLatency
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishSecondsSinceLast_1SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_1SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishSecondsSinceLast_2SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_2SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishSecondsSinceLast_5SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_5SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishSecondsSinceLast_60SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_60SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishSecondsSinceLast_300SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_300SOutage
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishDropRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishDropRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishDropRateLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishDropRateLast_1H
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetPingDishLatency() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishLatency
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestRouterDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestRouterDownloadMbps
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestRouterUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestRouterUploadMbps
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestRouterRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestRouterRssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestWifiDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestWifiDownloadMbps
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestWifiUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestWifiUploadMbps
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestClientDownloadMbps
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestClientUploadMbps
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestClientRssi
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientIface() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientIface
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientOui() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientSpeedtestClientOui
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientTxRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientTxRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientRxRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientRxRate
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetClientSpeedtestClientPlatformType() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientPlatformType
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_8DownloadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8DownloadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_8DownloadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8DownloadMbpsMax
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_8UploadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8UploadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_8UploadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8UploadMbpsMax
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_64DownloadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64DownloadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_64DownloadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64DownloadMbpsMax
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_64UploadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64UploadMbpsAvg
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetSpeedtestTcp_64UploadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64UploadMbpsMax
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetDishCellId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.DishCellId
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigSetupComplete() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigSetupComplete
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigBandsSplit() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigBandsSplit
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigIsRepeater() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigIsRepeater
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigOpenNetwork() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigOpenNetwork
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigIsAviation() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigIsAviation
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigSecureDns() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigSecureDns
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigLegacy() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigLegacy
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigApMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigApMode
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigDfsEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigDfsEnabled
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigNetworkNameIsDefault() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigNetworkNameIsDefault
	}
	return nil
}

func (x *StarlinkRouterHourlyMetricsV2) GetConfigRemoteSshEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigRemoteSshEnabled
	}
	return nil
}

type StarlinkRoutersHourlyMetricsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TimestampDate                       *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=timestamp_date,json=timestampDate,proto3" json:"timestamp_date,omitempty"`
	TimestampHour                       *wrapperspb.UInt32Value   `protobuf:"bytes,3,opt,name=timestamp_hour,json=timestampHour,proto3" json:"timestamp_hour,omitempty"`
	Timestamp                           *telemetron.TimestampInfo `protobuf:"bytes,10000,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SysHwGen                            *wrapperspb.UInt32Value   `protobuf:"bytes,4,opt,name=sys_hw_gen,json=sysHwGen,proto3" json:"sys_hw_gen,omitempty"`
	SysSw                               *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=sys_sw,json=sysSw,proto3" json:"sys_sw,omitempty"`
	SysCountry                          *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=sys_country,json=sysCountry,proto3" json:"sys_country,omitempty"`
	SysIsDev                            *wrapperspb.BoolValue     `protobuf:"bytes,7,opt,name=sys_is_dev,json=sysIsDev,proto3" json:"sys_is_dev,omitempty"`
	SysAllocFds                         *wrapperspb.UInt32Value   `protobuf:"bytes,8,opt,name=sys_alloc_fds,json=sysAllocFds,proto3" json:"sys_alloc_fds,omitempty"`
	SysCpuUsage                         *wrapperspb.FloatValue    `protobuf:"bytes,9,opt,name=sys_cpu_usage,json=sysCpuUsage,proto3" json:"sys_cpu_usage,omitempty"`
	SysMemFreeKb                        *wrapperspb.FloatValue    `protobuf:"bytes,10,opt,name=sys_mem_free_kb,json=sysMemFreeKb,proto3" json:"sys_mem_free_kb,omitempty"`
	SysBootcount                        *wrapperspb.Int32Value    `protobuf:"bytes,11,opt,name=sys_bootcount,json=sysBootcount,proto3" json:"sys_bootcount,omitempty"`
	SysPartitionsEqual                  *wrapperspb.BoolValue     `protobuf:"bytes,12,opt,name=sys_partitions_equal,json=sysPartitionsEqual,proto3" json:"sys_partitions_equal,omitempty"`
	SysUptimeSeconds                    *wrapperspb.UInt32Value   `protobuf:"bytes,13,opt,name=sys_uptime_seconds,json=sysUptimeSeconds,proto3" json:"sys_uptime_seconds,omitempty"`
	SysAntiRollbackVersion              *wrapperspb.Int32Value    `protobuf:"bytes,14,opt,name=sys_anti_rollback_version,json=sysAntiRollbackVersion,proto3" json:"sys_anti_rollback_version,omitempty"`
	Radios_2GhzChannel                  *wrapperspb.UInt32Value   `protobuf:"bytes,100,opt,name=radios_2ghz_channel,json=radios2ghzChannel,proto3" json:"radios_2ghz_channel,omitempty"`
	Radios_2GhzAntenna1Rssi             *wrapperspb.FloatValue    `protobuf:"bytes,101,opt,name=radios_2ghz_antenna1_rssi,json=radios2ghzAntenna1Rssi,proto3" json:"radios_2ghz_antenna1_rssi,omitempty"`
	Radios_2GhzAntenna2Rssi             *wrapperspb.FloatValue    `protobuf:"bytes,102,opt,name=radios_2ghz_antenna2_rssi,json=radios2ghzAntenna2Rssi,proto3" json:"radios_2ghz_antenna2_rssi,omitempty"`
	Radios_2GhzAntenna3Rssi             *wrapperspb.FloatValue    `protobuf:"bytes,103,opt,name=radios_2ghz_antenna3_rssi,json=radios2ghzAntenna3Rssi,proto3" json:"radios_2ghz_antenna3_rssi,omitempty"`
	Radios_2GhzIfaceCount               *wrapperspb.UInt32Value   `protobuf:"bytes,104,opt,name=radios_2ghz_iface_count,json=radios2ghzIfaceCount,proto3" json:"radios_2ghz_iface_count,omitempty"`
	Radios_2GhzChanBusyFraction         *wrapperspb.FloatValue    `protobuf:"bytes,105,opt,name=radios_2ghz_chan_busy_fraction,json=radios2ghzChanBusyFraction,proto3" json:"radios_2ghz_chan_busy_fraction,omitempty"`
	Radios_2GhzEdccaFraction            *wrapperspb.FloatValue    `protobuf:"bytes,106,opt,name=radios_2ghz_edcca_fraction,json=radios2ghzEdccaFraction,proto3" json:"radios_2ghz_edcca_fraction,omitempty"`
	Radios_2GhzOverlappingBssFraction   *wrapperspb.FloatValue    `protobuf:"bytes,107,opt,name=radios_2ghz_overlapping_bss_fraction,json=radios2ghzOverlappingBssFraction,proto3" json:"radios_2ghz_overlapping_bss_fraction,omitempty"`
	Radios_2GhzRxBytes                  *wrapperspb.Int64Value    `protobuf:"bytes,108,opt,name=radios_2ghz_rx_bytes,json=radios2ghzRxBytes,proto3" json:"radios_2ghz_rx_bytes,omitempty"`
	Radios_2GhzRxPackets                *wrapperspb.Int64Value    `protobuf:"bytes,109,opt,name=radios_2ghz_rx_packets,json=radios2ghzRxPackets,proto3" json:"radios_2ghz_rx_packets,omitempty"`
	Radios_2GhzRxErrors                 *wrapperspb.Int64Value    `protobuf:"bytes,110,opt,name=radios_2ghz_rx_errors,json=radios2ghzRxErrors,proto3" json:"radios_2ghz_rx_errors,omitempty"`
	Radios_2GhzRxFrameErrors            *wrapperspb.Int64Value    `protobuf:"bytes,111,opt,name=radios_2ghz_rx_frame_errors,json=radios2ghzRxFrameErrors,proto3" json:"radios_2ghz_rx_frame_errors,omitempty"`
	Radios_2GhzRxPacketErrorRate        *wrapperspb.FloatValue    `protobuf:"bytes,112,opt,name=radios_2ghz_rx_packet_error_rate,json=radios2ghzRxPacketErrorRate,proto3" json:"radios_2ghz_rx_packet_error_rate,omitempty"`
	Radios_2GhzRxAirtimeFraction        *wrapperspb.FloatValue    `protobuf:"bytes,113,opt,name=radios_2ghz_rx_airtime_fraction,json=radios2ghzRxAirtimeFraction,proto3" json:"radios_2ghz_rx_airtime_fraction,omitempty"`
	Radios_2GhzTxBytes                  *wrapperspb.Int64Value    `protobuf:"bytes,114,opt,name=radios_2ghz_tx_bytes,json=radios2ghzTxBytes,proto3" json:"radios_2ghz_tx_bytes,omitempty"`
	Radios_2GhzTxPackets                *wrapperspb.Int64Value    `protobuf:"bytes,115,opt,name=radios_2ghz_tx_packets,json=radios2ghzTxPackets,proto3" json:"radios_2ghz_tx_packets,omitempty"`
	Radios_2GhzTxErrors                 *wrapperspb.Int64Value    `protobuf:"bytes,116,opt,name=radios_2ghz_tx_errors,json=radios2ghzTxErrors,proto3" json:"radios_2ghz_tx_errors,omitempty"`
	Radios_2GhzTxPacketErrorRate        *wrapperspb.FloatValue    `protobuf:"bytes,117,opt,name=radios_2ghz_tx_packet_error_rate,json=radios2ghzTxPacketErrorRate,proto3" json:"radios_2ghz_tx_packet_error_rate,omitempty"`
	Radios_2GhzTxAirtimeFraction        *wrapperspb.FloatValue    `protobuf:"bytes,118,opt,name=radios_2ghz_tx_airtime_fraction,json=radios2ghzTxAirtimeFraction,proto3" json:"radios_2ghz_tx_airtime_fraction,omitempty"`
	Radios_5GhzChannel                  *wrapperspb.UInt32Value   `protobuf:"bytes,119,opt,name=radios_5ghz_channel,json=radios5ghzChannel,proto3" json:"radios_5ghz_channel,omitempty"`
	Radios_5GhzAntenna1Rssi             *wrapperspb.FloatValue    `protobuf:"bytes,120,opt,name=radios_5ghz_antenna1_rssi,json=radios5ghzAntenna1Rssi,proto3" json:"radios_5ghz_antenna1_rssi,omitempty"`
	Radios_5GhzAntenna2Rssi             *wrapperspb.FloatValue    `protobuf:"bytes,121,opt,name=radios_5ghz_antenna2_rssi,json=radios5ghzAntenna2Rssi,proto3" json:"radios_5ghz_antenna2_rssi,omitempty"`
	Radios_5GhzAntenna3Rssi             *wrapperspb.FloatValue    `protobuf:"bytes,122,opt,name=radios_5ghz_antenna3_rssi,json=radios5ghzAntenna3Rssi,proto3" json:"radios_5ghz_antenna3_rssi,omitempty"`
	Radios_5GhzIfaceCount               *wrapperspb.UInt32Value   `protobuf:"bytes,123,opt,name=radios_5ghz_iface_count,json=radios5ghzIfaceCount,proto3" json:"radios_5ghz_iface_count,omitempty"`
	Radios_5GhzChanBusyFraction         *wrapperspb.FloatValue    `protobuf:"bytes,124,opt,name=radios_5ghz_chan_busy_fraction,json=radios5ghzChanBusyFraction,proto3" json:"radios_5ghz_chan_busy_fraction,omitempty"`
	Radios_5GhzEdccaFraction            *wrapperspb.FloatValue    `protobuf:"bytes,125,opt,name=radios_5ghz_edcca_fraction,json=radios5ghzEdccaFraction,proto3" json:"radios_5ghz_edcca_fraction,omitempty"`
	Radios_5GhzOverlappingBssFraction   *wrapperspb.FloatValue    `protobuf:"bytes,126,opt,name=radios_5ghz_overlapping_bss_fraction,json=radios5ghzOverlappingBssFraction,proto3" json:"radios_5ghz_overlapping_bss_fraction,omitempty"`
	Radios_5GhzRxBytes                  *wrapperspb.Int64Value    `protobuf:"bytes,127,opt,name=radios_5ghz_rx_bytes,json=radios5ghzRxBytes,proto3" json:"radios_5ghz_rx_bytes,omitempty"`
	Radios_5GhzRxPackets                *wrapperspb.Int64Value    `protobuf:"bytes,128,opt,name=radios_5ghz_rx_packets,json=radios5ghzRxPackets,proto3" json:"radios_5ghz_rx_packets,omitempty"`
	Radios_5GhzRxErrors                 *wrapperspb.Int64Value    `protobuf:"bytes,129,opt,name=radios_5ghz_rx_errors,json=radios5ghzRxErrors,proto3" json:"radios_5ghz_rx_errors,omitempty"`
	Radios_5GhzRxFrameErrors            *wrapperspb.Int64Value    `protobuf:"bytes,130,opt,name=radios_5ghz_rx_frame_errors,json=radios5ghzRxFrameErrors,proto3" json:"radios_5ghz_rx_frame_errors,omitempty"`
	Radios_5GhzRxPacketErrorRate        *wrapperspb.FloatValue    `protobuf:"bytes,131,opt,name=radios_5ghz_rx_packet_error_rate,json=radios5ghzRxPacketErrorRate,proto3" json:"radios_5ghz_rx_packet_error_rate,omitempty"`
	Radios_5GhzRxAirtimeFraction        *wrapperspb.FloatValue    `protobuf:"bytes,132,opt,name=radios_5ghz_rx_airtime_fraction,json=radios5ghzRxAirtimeFraction,proto3" json:"radios_5ghz_rx_airtime_fraction,omitempty"`
	Radios_5GhzTxBytes                  *wrapperspb.Int64Value    `protobuf:"bytes,133,opt,name=radios_5ghz_tx_bytes,json=radios5ghzTxBytes,proto3" json:"radios_5ghz_tx_bytes,omitempty"`
	Radios_5GhzTxPackets                *wrapperspb.Int64Value    `protobuf:"bytes,134,opt,name=radios_5ghz_tx_packets,json=radios5ghzTxPackets,proto3" json:"radios_5ghz_tx_packets,omitempty"`
	Radios_5GhzTxErrors                 *wrapperspb.Int64Value    `protobuf:"bytes,135,opt,name=radios_5ghz_tx_errors,json=radios5ghzTxErrors,proto3" json:"radios_5ghz_tx_errors,omitempty"`
	Radios_5GhzTxPacketErrorRate        *wrapperspb.FloatValue    `protobuf:"bytes,136,opt,name=radios_5ghz_tx_packet_error_rate,json=radios5ghzTxPacketErrorRate,proto3" json:"radios_5ghz_tx_packet_error_rate,omitempty"`
	Radios_5GhzTxAirtimeFraction        *wrapperspb.FloatValue    `protobuf:"bytes,137,opt,name=radios_5ghz_tx_airtime_fraction,json=radios5ghzTxAirtimeFraction,proto3" json:"radios_5ghz_tx_airtime_fraction,omitempty"`
	Radios_2GhzThermalTemp              *wrapperspb.FloatValue    `protobuf:"bytes,200,opt,name=radios_2ghz_thermal_temp,json=radios2ghzThermalTemp,proto3" json:"radios_2ghz_thermal_temp,omitempty"`
	Radios_5GhzThermalTemp              *wrapperspb.FloatValue    `protobuf:"bytes,201,opt,name=radios_5ghz_thermal_temp,json=radios5ghzThermalTemp,proto3" json:"radios_5ghz_thermal_temp,omitempty"`
	Radios_2GhzThermalDutyCycle         *wrapperspb.FloatValue    `protobuf:"bytes,202,opt,name=radios_2ghz_thermal_duty_cycle,json=radios2ghzThermalDutyCycle,proto3" json:"radios_2ghz_thermal_duty_cycle,omitempty"`
	Radios_5GhzThermalDutyCycle         *wrapperspb.FloatValue    `protobuf:"bytes,203,opt,name=radios_5ghz_thermal_duty_cycle,json=radios5ghzThermalDutyCycle,proto3" json:"radios_5ghz_thermal_duty_cycle,omitempty"`
	Radios_2GhzThermalThrottledSeconds  *wrapperspb.UInt32Value   `protobuf:"bytes,204,opt,name=radios_2ghz_thermal_throttled_seconds,json=radios2ghzThermalThrottledSeconds,proto3" json:"radios_2ghz_thermal_throttled_seconds,omitempty"`
	Radios_5GhzThermalThrottledSeconds  *wrapperspb.UInt32Value   `protobuf:"bytes,205,opt,name=radios_5ghz_thermal_throttled_seconds,json=radios5ghzThermalThrottledSeconds,proto3" json:"radios_5ghz_thermal_throttled_seconds,omitempty"`
	IfacesLanEthRxBytes                 *wrapperspb.Int64Value    `protobuf:"bytes,300,opt,name=ifaces_lan_eth_rx_bytes,json=ifacesLanEthRxBytes,proto3" json:"ifaces_lan_eth_rx_bytes,omitempty"`
	IfacesLanEthRxPackets               *wrapperspb.Int64Value    `protobuf:"bytes,301,opt,name=ifaces_lan_eth_rx_packets,json=ifacesLanEthRxPackets,proto3" json:"ifaces_lan_eth_rx_packets,omitempty"`
	IfacesLanEthRxErrors                *wrapperspb.Int64Value    `protobuf:"bytes,302,opt,name=ifaces_lan_eth_rx_errors,json=ifacesLanEthRxErrors,proto3" json:"ifaces_lan_eth_rx_errors,omitempty"`
	IfacesLanEthRxFrameErrors           *wrapperspb.Int64Value    `protobuf:"bytes,303,opt,name=ifaces_lan_eth_rx_frame_errors,json=ifacesLanEthRxFrameErrors,proto3" json:"ifaces_lan_eth_rx_frame_errors,omitempty"`
	IfacesLanEthTxBytes                 *wrapperspb.Int64Value    `protobuf:"bytes,304,opt,name=ifaces_lan_eth_tx_bytes,json=ifacesLanEthTxBytes,proto3" json:"ifaces_lan_eth_tx_bytes,omitempty"`
	IfacesLanEthTxPackets               *wrapperspb.Int64Value    `protobuf:"bytes,305,opt,name=ifaces_lan_eth_tx_packets,json=ifacesLanEthTxPackets,proto3" json:"ifaces_lan_eth_tx_packets,omitempty"`
	IfacesLanEthTxErrors                *wrapperspb.Int64Value    `protobuf:"bytes,306,opt,name=ifaces_lan_eth_tx_errors,json=ifacesLanEthTxErrors,proto3" json:"ifaces_lan_eth_tx_errors,omitempty"`
	IfacesWanEthRxBytes                 *wrapperspb.Int64Value    `protobuf:"bytes,307,opt,name=ifaces_wan_eth_rx_bytes,json=ifacesWanEthRxBytes,proto3" json:"ifaces_wan_eth_rx_bytes,omitempty"`
	IfacesWanEthRxPackets               *wrapperspb.Int64Value    `protobuf:"bytes,308,opt,name=ifaces_wan_eth_rx_packets,json=ifacesWanEthRxPackets,proto3" json:"ifaces_wan_eth_rx_packets,omitempty"`
	IfacesWanEthRxErrors                *wrapperspb.Int64Value    `protobuf:"bytes,309,opt,name=ifaces_wan_eth_rx_errors,json=ifacesWanEthRxErrors,proto3" json:"ifaces_wan_eth_rx_errors,omitempty"`
	IfacesWanEthRxFrameErrors           *wrapperspb.Int64Value    `protobuf:"bytes,310,opt,name=ifaces_wan_eth_rx_frame_errors,json=ifacesWanEthRxFrameErrors,proto3" json:"ifaces_wan_eth_rx_frame_errors,omitempty"`
	IfacesWanEthTxBytes                 *wrapperspb.Int64Value    `protobuf:"bytes,311,opt,name=ifaces_wan_eth_tx_bytes,json=ifacesWanEthTxBytes,proto3" json:"ifaces_wan_eth_tx_bytes,omitempty"`
	IfacesWanEthTxPackets               *wrapperspb.Int64Value    `protobuf:"bytes,312,opt,name=ifaces_wan_eth_tx_packets,json=ifacesWanEthTxPackets,proto3" json:"ifaces_wan_eth_tx_packets,omitempty"`
	IfacesWanEthTxErrors                *wrapperspb.Int64Value    `protobuf:"bytes,313,opt,name=ifaces_wan_eth_tx_errors,json=ifacesWanEthTxErrors,proto3" json:"ifaces_wan_eth_tx_errors,omitempty"`
	Clients                             *wrapperspb.UInt32Value   `protobuf:"bytes,400,opt,name=clients,proto3" json:"clients,omitempty"`
	Clients_2Ghz                        *wrapperspb.UInt32Value   `protobuf:"bytes,401,opt,name=clients_2ghz,json=clients2ghz,proto3" json:"clients_2ghz,omitempty"`
	Clients_5Ghz                        *wrapperspb.UInt32Value   `protobuf:"bytes,402,opt,name=clients_5ghz,json=clients5ghz,proto3" json:"clients_5ghz,omitempty"`
	ClientsEth                          *wrapperspb.UInt32Value   `protobuf:"bytes,403,opt,name=clients_eth,json=clientsEth,proto3" json:"clients_eth,omitempty"`
	ClientsRepeater                     *wrapperspb.UInt32Value   `protobuf:"bytes,404,opt,name=clients_repeater,json=clientsRepeater,proto3" json:"clients_repeater,omitempty"`
	ClientsRepeater_2Ghz                *wrapperspb.UInt32Value   `protobuf:"bytes,405,opt,name=clients_repeater_2ghz,json=clientsRepeater2ghz,proto3" json:"clients_repeater_2ghz,omitempty"`
	ClientsRepeater_5Ghz                *wrapperspb.UInt32Value   `protobuf:"bytes,406,opt,name=clients_repeater_5ghz,json=clientsRepeater5ghz,proto3" json:"clients_repeater_5ghz,omitempty"`
	ClientsRepeaterEth                  *wrapperspb.UInt32Value   `protobuf:"bytes,407,opt,name=clients_repeater_eth,json=clientsRepeaterEth,proto3" json:"clients_repeater_eth,omitempty"`
	MeshHops                            *wrapperspb.UInt32Value   `protobuf:"bytes,408,opt,name=mesh_hops,json=meshHops,proto3" json:"mesh_hops,omitempty"`
	MeshOneHopRssiAvg_2Ghz              *wrapperspb.FloatValue    `protobuf:"bytes,409,opt,name=mesh_one_hop_rssi_avg_2ghz,json=meshOneHopRssiAvg2ghz,proto3" json:"mesh_one_hop_rssi_avg_2ghz,omitempty"`
	MeshOneHopRssiAvg_5Ghz              *wrapperspb.FloatValue    `protobuf:"bytes,410,opt,name=mesh_one_hop_rssi_avg_5ghz,json=meshOneHopRssiAvg5ghz,proto3" json:"mesh_one_hop_rssi_avg_5ghz,omitempty"`
	MeshTwoHopRssiAvg_2Ghz              *wrapperspb.FloatValue    `protobuf:"bytes,411,opt,name=mesh_two_hop_rssi_avg_2ghz,json=meshTwoHopRssiAvg2ghz,proto3" json:"mesh_two_hop_rssi_avg_2ghz,omitempty"`
	MeshTwoHopRssiAvg_5Ghz              *wrapperspb.FloatValue    `protobuf:"bytes,412,opt,name=mesh_two_hop_rssi_avg_5ghz,json=meshTwoHopRssiAvg5ghz,proto3" json:"mesh_two_hop_rssi_avg_5ghz,omitempty"`
	PingSecondsSinceLast_1SOutage       *wrapperspb.FloatValue    `protobuf:"bytes,600,opt,name=ping_seconds_since_last_1s_outage,json=pingSecondsSinceLast1sOutage,proto3" json:"ping_seconds_since_last_1s_outage,omitempty"`
	PingSecondsSinceLast_2SOutage       *wrapperspb.FloatValue    `protobuf:"bytes,601,opt,name=ping_seconds_since_last_2s_outage,json=pingSecondsSinceLast2sOutage,proto3" json:"ping_seconds_since_last_2s_outage,omitempty"`
	PingSecondsSinceLast_5SOutage       *wrapperspb.FloatValue    `protobuf:"bytes,602,opt,name=ping_seconds_since_last_5s_outage,json=pingSecondsSinceLast5sOutage,proto3" json:"ping_seconds_since_last_5s_outage,omitempty"`
	PingSecondsSinceLast_60SOutage      *wrapperspb.FloatValue    `protobuf:"bytes,603,opt,name=ping_seconds_since_last_60s_outage,json=pingSecondsSinceLast60sOutage,proto3" json:"ping_seconds_since_last_60s_outage,omitempty"`
	PingSecondsSinceLast_300SOutage     *wrapperspb.FloatValue    `protobuf:"bytes,604,opt,name=ping_seconds_since_last_300s_outage,json=pingSecondsSinceLast300sOutage,proto3" json:"ping_seconds_since_last_300s_outage,omitempty"`
	PingDropRate                        *wrapperspb.FloatValue    `protobuf:"bytes,605,opt,name=ping_drop_rate,json=pingDropRate,proto3" json:"ping_drop_rate,omitempty"`
	PingDropRateLast_1H                 *wrapperspb.FloatValue    `protobuf:"bytes,606,opt,name=ping_drop_rate_last_1h,json=pingDropRateLast1h,proto3" json:"ping_drop_rate_last_1h,omitempty"`
	PingLatency                         *wrapperspb.FloatValue    `protobuf:"bytes,607,opt,name=ping_latency,json=pingLatency,proto3" json:"ping_latency,omitempty"`
	PingLatencyLast_1H                  *wrapperspb.FloatValue    `protobuf:"bytes,618,opt,name=ping_latency_last_1h,json=pingLatencyLast1h,proto3" json:"ping_latency_last_1h,omitempty"`
	PingDishSecondsSinceLast_1SOutage   *wrapperspb.FloatValue    `protobuf:"bytes,610,opt,name=ping_dish_seconds_since_last_1s_outage,json=pingDishSecondsSinceLast1sOutage,proto3" json:"ping_dish_seconds_since_last_1s_outage,omitempty"`
	PingDishSecondsSinceLast_2SOutage   *wrapperspb.FloatValue    `protobuf:"bytes,611,opt,name=ping_dish_seconds_since_last_2s_outage,json=pingDishSecondsSinceLast2sOutage,proto3" json:"ping_dish_seconds_since_last_2s_outage,omitempty"`
	PingDishSecondsSinceLast_5SOutage   *wrapperspb.FloatValue    `protobuf:"bytes,612,opt,name=ping_dish_seconds_since_last_5s_outage,json=pingDishSecondsSinceLast5sOutage,proto3" json:"ping_dish_seconds_since_last_5s_outage,omitempty"`
	PingDishSecondsSinceLast_60SOutage  *wrapperspb.FloatValue    `protobuf:"bytes,613,opt,name=ping_dish_seconds_since_last_60s_outage,json=pingDishSecondsSinceLast60sOutage,proto3" json:"ping_dish_seconds_since_last_60s_outage,omitempty"`
	PingDishSecondsSinceLast_300SOutage *wrapperspb.FloatValue    `protobuf:"bytes,614,opt,name=ping_dish_seconds_since_last_300s_outage,json=pingDishSecondsSinceLast300sOutage,proto3" json:"ping_dish_seconds_since_last_300s_outage,omitempty"`
	PingDishDropRate                    *wrapperspb.FloatValue    `protobuf:"bytes,615,opt,name=ping_dish_drop_rate,json=pingDishDropRate,proto3" json:"ping_dish_drop_rate,omitempty"`
	PingDishDropRateLast_1H             *wrapperspb.FloatValue    `protobuf:"bytes,616,opt,name=ping_dish_drop_rate_last_1h,json=pingDishDropRateLast1h,proto3" json:"ping_dish_drop_rate_last_1h,omitempty"`
	PingDishLatency                     *wrapperspb.FloatValue    `protobuf:"bytes,617,opt,name=ping_dish_latency,json=pingDishLatency,proto3" json:"ping_dish_latency,omitempty"`
	PingDishLatencyLast_1H              *wrapperspb.FloatValue    `protobuf:"bytes,619,opt,name=ping_dish_latency_last_1h,json=pingDishLatencyLast1h,proto3" json:"ping_dish_latency_last_1h,omitempty"`
	ClientSpeedtestRouterDownloadMbps   *wrapperspb.FloatValue    `protobuf:"bytes,700,opt,name=client_speedtest_router_download_mbps,json=clientSpeedtestRouterDownloadMbps,proto3" json:"client_speedtest_router_download_mbps,omitempty"`
	ClientSpeedtestRouterUploadMbps     *wrapperspb.FloatValue    `protobuf:"bytes,701,opt,name=client_speedtest_router_upload_mbps,json=clientSpeedtestRouterUploadMbps,proto3" json:"client_speedtest_router_upload_mbps,omitempty"`
	ClientSpeedtestRouterRssi           *wrapperspb.FloatValue    `protobuf:"bytes,702,opt,name=client_speedtest_router_rssi,json=clientSpeedtestRouterRssi,proto3" json:"client_speedtest_router_rssi,omitempty"`
	ClientSpeedtestWifiDownloadMbps     *wrapperspb.FloatValue    `protobuf:"bytes,703,opt,name=client_speedtest_wifi_download_mbps,json=clientSpeedtestWifiDownloadMbps,proto3" json:"client_speedtest_wifi_download_mbps,omitempty"`
	ClientSpeedtestWifiUploadMbps       *wrapperspb.FloatValue    `protobuf:"bytes,704,opt,name=client_speedtest_wifi_upload_mbps,json=clientSpeedtestWifiUploadMbps,proto3" json:"client_speedtest_wifi_upload_mbps,omitempty"`
	ClientSpeedtestClientDownloadMbps   *wrapperspb.FloatValue    `protobuf:"bytes,705,opt,name=client_speedtest_client_download_mbps,json=clientSpeedtestClientDownloadMbps,proto3" json:"client_speedtest_client_download_mbps,omitempty"`
	ClientSpeedtestClientUploadMbps     *wrapperspb.FloatValue    `protobuf:"bytes,706,opt,name=client_speedtest_client_upload_mbps,json=clientSpeedtestClientUploadMbps,proto3" json:"client_speedtest_client_upload_mbps,omitempty"`
	ClientSpeedtestClientRssi           *wrapperspb.FloatValue    `protobuf:"bytes,707,opt,name=client_speedtest_client_rssi,json=clientSpeedtestClientRssi,proto3" json:"client_speedtest_client_rssi,omitempty"`
	ClientSpeedtestClientIface          *wrapperspb.UInt32Value   `protobuf:"bytes,708,opt,name=client_speedtest_client_iface,json=clientSpeedtestClientIface,proto3" json:"client_speedtest_client_iface,omitempty"`
	ClientSpeedtestClientOui            *wrapperspb.StringValue   `protobuf:"bytes,709,opt,name=client_speedtest_client_oui,json=clientSpeedtestClientOui,proto3" json:"client_speedtest_client_oui,omitempty"`
	ClientSpeedtestClientTxRate         *wrapperspb.UInt32Value   `protobuf:"bytes,710,opt,name=client_speedtest_client_tx_rate,json=clientSpeedtestClientTxRate,proto3" json:"client_speedtest_client_tx_rate,omitempty"`
	ClientSpeedtestClientRxRate         *wrapperspb.UInt32Value   `protobuf:"bytes,711,opt,name=client_speedtest_client_rx_rate,json=clientSpeedtestClientRxRate,proto3" json:"client_speedtest_client_rx_rate,omitempty"`
	ClientSpeedtestClientPlatformType   *wrapperspb.UInt32Value   `protobuf:"bytes,712,opt,name=client_speedtest_client_platform_type,json=clientSpeedtestClientPlatformType,proto3" json:"client_speedtest_client_platform_type,omitempty"`
	SpeedtestTcp_8DownloadMbpsAvg       *wrapperspb.FloatValue    `protobuf:"bytes,800,opt,name=speedtest_tcp_8_download_mbps_avg,json=speedtestTcp8DownloadMbpsAvg,proto3" json:"speedtest_tcp_8_download_mbps_avg,omitempty"`
	SpeedtestTcp_8DownloadMbpsMax       *wrapperspb.FloatValue    `protobuf:"bytes,801,opt,name=speedtest_tcp_8_download_mbps_max,json=speedtestTcp8DownloadMbpsMax,proto3" json:"speedtest_tcp_8_download_mbps_max,omitempty"`
	SpeedtestTcp_8UploadMbpsAvg         *wrapperspb.FloatValue    `protobuf:"bytes,802,opt,name=speedtest_tcp_8_upload_mbps_avg,json=speedtestTcp8UploadMbpsAvg,proto3" json:"speedtest_tcp_8_upload_mbps_avg,omitempty"`
	SpeedtestTcp_8UploadMbpsMax         *wrapperspb.FloatValue    `protobuf:"bytes,803,opt,name=speedtest_tcp_8_upload_mbps_max,json=speedtestTcp8UploadMbpsMax,proto3" json:"speedtest_tcp_8_upload_mbps_max,omitempty"`
	SpeedtestTcp_64DownloadMbpsAvg      *wrapperspb.FloatValue    `protobuf:"bytes,804,opt,name=speedtest_tcp_64_download_mbps_avg,json=speedtestTcp64DownloadMbpsAvg,proto3" json:"speedtest_tcp_64_download_mbps_avg,omitempty"`
	SpeedtestTcp_64DownloadMbpsMax      *wrapperspb.FloatValue    `protobuf:"bytes,805,opt,name=speedtest_tcp_64_download_mbps_max,json=speedtestTcp64DownloadMbpsMax,proto3" json:"speedtest_tcp_64_download_mbps_max,omitempty"`
	SpeedtestTcp_64UploadMbpsAvg        *wrapperspb.FloatValue    `protobuf:"bytes,806,opt,name=speedtest_tcp_64_upload_mbps_avg,json=speedtestTcp64UploadMbpsAvg,proto3" json:"speedtest_tcp_64_upload_mbps_avg,omitempty"`
	SpeedtestTcp_64UploadMbpsMax        *wrapperspb.FloatValue    `protobuf:"bytes,807,opt,name=speedtest_tcp_64_upload_mbps_max,json=speedtestTcp64UploadMbpsMax,proto3" json:"speedtest_tcp_64_upload_mbps_max,omitempty"`
	DishCellId                          *wrapperspb.UInt32Value   `protobuf:"bytes,900,opt,name=dish_cell_id,json=dishCellId,proto3" json:"dish_cell_id,omitempty"`
	ConfigSetupComplete                 *wrapperspb.BoolValue     `protobuf:"bytes,1000,opt,name=config_setup_complete,json=configSetupComplete,proto3" json:"config_setup_complete,omitempty"`
	ConfigBandsSplit                    *wrapperspb.BoolValue     `protobuf:"bytes,1001,opt,name=config_bands_split,json=configBandsSplit,proto3" json:"config_bands_split,omitempty"`
	ConfigIsRepeater                    *wrapperspb.BoolValue     `protobuf:"bytes,1002,opt,name=config_is_repeater,json=configIsRepeater,proto3" json:"config_is_repeater,omitempty"`
	ConfigOpenNetwork                   *wrapperspb.BoolValue     `protobuf:"bytes,1003,opt,name=config_open_network,json=configOpenNetwork,proto3" json:"config_open_network,omitempty"`
	ConfigIsAviation                    *wrapperspb.BoolValue     `protobuf:"bytes,1004,opt,name=config_is_aviation,json=configIsAviation,proto3" json:"config_is_aviation,omitempty"`
	ConfigSecureDns                     *wrapperspb.BoolValue     `protobuf:"bytes,1005,opt,name=config_secure_dns,json=configSecureDns,proto3" json:"config_secure_dns,omitempty"`
	ConfigLegacy                        *wrapperspb.BoolValue     `protobuf:"bytes,1006,opt,name=config_legacy,json=configLegacy,proto3" json:"config_legacy,omitempty"`
	ConfigApMode                        *wrapperspb.BoolValue     `protobuf:"bytes,1007,opt,name=config_ap_mode,json=configApMode,proto3" json:"config_ap_mode,omitempty"`
	ConfigDfsEnabled                    *wrapperspb.BoolValue     `protobuf:"bytes,1008,opt,name=config_dfs_enabled,json=configDfsEnabled,proto3" json:"config_dfs_enabled,omitempty"`
	ConfigNetworkNameIsDefault          *wrapperspb.BoolValue     `protobuf:"bytes,1009,opt,name=config_network_name_is_default,json=configNetworkNameIsDefault,proto3" json:"config_network_name_is_default,omitempty"`
	ConfigRemoteSshEnabled              *wrapperspb.BoolValue     `protobuf:"bytes,1010,opt,name=config_remote_ssh_enabled,json=configRemoteSshEnabled,proto3" json:"config_remote_ssh_enabled,omitempty"`
}

func (x *StarlinkRoutersHourlyMetricsV2) Reset() {
	*x = StarlinkRoutersHourlyMetricsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlinkRoutersHourlyMetricsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlinkRoutersHourlyMetricsV2) ProtoMessage() {}

func (x *StarlinkRoutersHourlyMetricsV2) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlinkRoutersHourlyMetricsV2.ProtoReflect.Descriptor instead.
func (*StarlinkRoutersHourlyMetricsV2) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{38}
}

func (x *StarlinkRoutersHourlyMetricsV2) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetTimestampDate() *wrapperspb.StringValue {
	if x != nil {
		return x.TimestampDate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetTimestampHour() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TimestampHour
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetTimestamp() *telemetron.TimestampInfo {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysHwGen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysHwGen
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysSw() *wrapperspb.StringValue {
	if x != nil {
		return x.SysSw
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysCountry() *wrapperspb.StringValue {
	if x != nil {
		return x.SysCountry
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysIsDev() *wrapperspb.BoolValue {
	if x != nil {
		return x.SysIsDev
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysAllocFds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysAllocFds
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysCpuUsage() *wrapperspb.FloatValue {
	if x != nil {
		return x.SysCpuUsage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysMemFreeKb() *wrapperspb.FloatValue {
	if x != nil {
		return x.SysMemFreeKb
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysBootcount() *wrapperspb.Int32Value {
	if x != nil {
		return x.SysBootcount
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysPartitionsEqual() *wrapperspb.BoolValue {
	if x != nil {
		return x.SysPartitionsEqual
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysUptimeSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SysUptimeSeconds
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSysAntiRollbackVersion() *wrapperspb.Int32Value {
	if x != nil {
		return x.SysAntiRollbackVersion
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzChannel() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzChannel
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzAntenna1Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna1Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzAntenna2Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna2Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzAntenna3Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzAntenna3Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzIfaceCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzIfaceCount
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzChanBusyFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzChanBusyFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzEdccaFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzEdccaFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzOverlappingBssFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzOverlappingBssFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzRxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzRxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzRxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzRxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzRxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzRxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzRxFrameErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzRxFrameErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzRxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzRxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzRxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzRxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzTxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzTxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzTxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzTxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzTxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_2GhzTxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzTxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzTxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzTxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzTxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzChannel() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzChannel
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzAntenna1Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna1Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzAntenna2Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna2Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzAntenna3Rssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzAntenna3Rssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzIfaceCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzIfaceCount
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzChanBusyFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzChanBusyFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzEdccaFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzEdccaFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzOverlappingBssFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzOverlappingBssFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzRxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzRxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzRxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzRxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzRxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzRxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzRxFrameErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzRxFrameErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzRxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzRxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzRxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzRxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzTxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzTxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzTxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzTxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzTxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.Radios_5GhzTxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzTxPacketErrorRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzTxPacketErrorRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzTxAirtimeFraction() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzTxAirtimeFraction
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzThermalTemp() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzThermalTemp
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzThermalTemp() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzThermalTemp
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzThermalDutyCycle() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_2GhzThermalDutyCycle
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzThermalDutyCycle() *wrapperspb.FloatValue {
	if x != nil {
		return x.Radios_5GhzThermalDutyCycle
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_2GhzThermalThrottledSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_2GhzThermalThrottledSeconds
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetRadios_5GhzThermalThrottledSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Radios_5GhzThermalThrottledSeconds
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthRxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthRxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthRxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthRxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthRxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthRxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthRxFrameErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthRxFrameErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthTxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthTxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthTxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthTxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesLanEthTxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesLanEthTxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthRxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthRxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthRxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthRxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthRxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthRxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthRxFrameErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthRxFrameErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthTxBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthTxBytes
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthTxPackets() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthTxPackets
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetIfacesWanEthTxErrors() *wrapperspb.Int64Value {
	if x != nil {
		return x.IfacesWanEthTxErrors
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClients() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClients_2Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients_2Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClients_5Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Clients_5Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientsEth() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsEth
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientsRepeater() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientsRepeater_2Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater_2Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientsRepeater_5Ghz() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeater_5Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientsRepeaterEth() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientsRepeaterEth
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshHops() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MeshHops
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshOneHopRssiAvg_2Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshOneHopRssiAvg_2Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshOneHopRssiAvg_5Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshOneHopRssiAvg_5Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshTwoHopRssiAvg_2Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshTwoHopRssiAvg_2Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetMeshTwoHopRssiAvg_5Ghz() *wrapperspb.FloatValue {
	if x != nil {
		return x.MeshTwoHopRssiAvg_5Ghz
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingSecondsSinceLast_1SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_1SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingSecondsSinceLast_2SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_2SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingSecondsSinceLast_5SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_5SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingSecondsSinceLast_60SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_60SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingSecondsSinceLast_300SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingSecondsSinceLast_300SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDropRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDropRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDropRateLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDropRateLast_1H
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingLatency() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingLatency
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingLatencyLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingLatencyLast_1H
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishSecondsSinceLast_1SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_1SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishSecondsSinceLast_2SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_2SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishSecondsSinceLast_5SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_5SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishSecondsSinceLast_60SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_60SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishSecondsSinceLast_300SOutage() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishSecondsSinceLast_300SOutage
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishDropRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishDropRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishDropRateLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishDropRateLast_1H
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishLatency() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishLatency
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetPingDishLatencyLast_1H() *wrapperspb.FloatValue {
	if x != nil {
		return x.PingDishLatencyLast_1H
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestRouterDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestRouterDownloadMbps
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestRouterUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestRouterUploadMbps
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestRouterRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestRouterRssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestWifiDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestWifiDownloadMbps
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestWifiUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestWifiUploadMbps
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientDownloadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestClientDownloadMbps
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientUploadMbps() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestClientUploadMbps
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSpeedtestClientRssi
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientIface() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientIface
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientOui() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientSpeedtestClientOui
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientTxRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientTxRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientRxRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientRxRate
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetClientSpeedtestClientPlatformType() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClientSpeedtestClientPlatformType
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_8DownloadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8DownloadMbpsAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_8DownloadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8DownloadMbpsMax
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_8UploadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8UploadMbpsAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_8UploadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_8UploadMbpsMax
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_64DownloadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64DownloadMbpsAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_64DownloadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64DownloadMbpsMax
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_64UploadMbpsAvg() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64UploadMbpsAvg
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetSpeedtestTcp_64UploadMbpsMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedtestTcp_64UploadMbpsMax
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetDishCellId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.DishCellId
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigSetupComplete() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigSetupComplete
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigBandsSplit() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigBandsSplit
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigIsRepeater() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigIsRepeater
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigOpenNetwork() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigOpenNetwork
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigIsAviation() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigIsAviation
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigSecureDns() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigSecureDns
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigLegacy() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigLegacy
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigApMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigApMode
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigDfsEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigDfsEnabled
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigNetworkNameIsDefault() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigNetworkNameIsDefault
	}
	return nil
}

func (x *StarlinkRoutersHourlyMetricsV2) GetConfigRemoteSshEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConfigRemoteSshEnabled
	}
	return nil
}

type StarlinkRouterAlerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Source string                    `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Active bool                      `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	Start  *telemetron.TimestampInfo `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	End    *telemetron.TimestampInfo `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *StarlinkRouterAlerts) Reset() {
	*x = StarlinkRouterAlerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlinkRouterAlerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlinkRouterAlerts) ProtoMessage() {}

func (x *StarlinkRouterAlerts) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlinkRouterAlerts.ProtoReflect.Descriptor instead.
func (*StarlinkRouterAlerts) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{39}
}

func (x *StarlinkRouterAlerts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StarlinkRouterAlerts) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *StarlinkRouterAlerts) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *StarlinkRouterAlerts) GetStart() *telemetron.TimestampInfo {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *StarlinkRouterAlerts) GetEnd() *telemetron.TimestampInfo {
	if x != nil {
		return x.End
	}
	return nil
}

type WifiClient_RxStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes                  uint64  `protobuf:"varint,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CountErrors            uint64  `protobuf:"varint,2,opt,name=count_errors,json=countErrors,proto3" json:"count_errors,omitempty"`
	Nss                    int32   `protobuf:"varint,3,opt,name=nss,proto3" json:"nss,omitempty"`
	RateMbps               uint32  `protobuf:"varint,8,opt,name=rate_mbps,json=rateMbps,proto3" json:"rate_mbps,omitempty"`
	Mcs                    uint32  `protobuf:"varint,5,opt,name=mcs,proto3" json:"mcs,omitempty"`
	Bandwidth              uint32  `protobuf:"varint,6,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	GuardNs                uint32  `protobuf:"varint,7,opt,name=guard_ns,json=guardNs,proto3" json:"guard_ns,omitempty"`
	AirtimeFractionLast_1S float32 `protobuf:"fixed32,9,opt,name=airtime_fraction_last_1s,json=airtimeFractionLast1s,proto3" json:"airtime_fraction_last_1s,omitempty"`
	SampledPackets         uint32  `protobuf:"varint,10,opt,name=sampled_packets,json=sampledPackets,proto3" json:"sampled_packets,omitempty"`
	SampledPacketsRetried  uint32  `protobuf:"varint,11,opt,name=sampled_packets_retried,json=sampledPacketsRetried,proto3" json:"sampled_packets_retried,omitempty"`
	SampledPacketsDropped  uint32  `protobuf:"varint,12,opt,name=sampled_packets_dropped,json=sampledPacketsDropped,proto3" json:"sampled_packets_dropped,omitempty"`
}

func (x *WifiClient_RxStats) Reset() {
	*x = WifiClient_RxStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiClient_RxStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiClient_RxStats) ProtoMessage() {}

func (x *WifiClient_RxStats) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiClient_RxStats.ProtoReflect.Descriptor instead.
func (*WifiClient_RxStats) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{18, 0}
}

func (x *WifiClient_RxStats) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *WifiClient_RxStats) GetCountErrors() uint64 {
	if x != nil {
		return x.CountErrors
	}
	return 0
}

func (x *WifiClient_RxStats) GetNss() int32 {
	if x != nil {
		return x.Nss
	}
	return 0
}

func (x *WifiClient_RxStats) GetRateMbps() uint32 {
	if x != nil {
		return x.RateMbps
	}
	return 0
}

func (x *WifiClient_RxStats) GetMcs() uint32 {
	if x != nil {
		return x.Mcs
	}
	return 0
}

func (x *WifiClient_RxStats) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *WifiClient_RxStats) GetGuardNs() uint32 {
	if x != nil {
		return x.GuardNs
	}
	return 0
}

func (x *WifiClient_RxStats) GetAirtimeFractionLast_1S() float32 {
	if x != nil {
		return x.AirtimeFractionLast_1S
	}
	return 0
}

func (x *WifiClient_RxStats) GetSampledPackets() uint32 {
	if x != nil {
		return x.SampledPackets
	}
	return 0
}

func (x *WifiClient_RxStats) GetSampledPacketsRetried() uint32 {
	if x != nil {
		return x.SampledPacketsRetried
	}
	return 0
}

func (x *WifiClient_RxStats) GetSampledPacketsDropped() uint32 {
	if x != nil {
		return x.SampledPacketsDropped
	}
	return 0
}

type WifiClient_TxStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes                  uint64  `protobuf:"varint,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	SuccessBytes           uint64  `protobuf:"varint,2,opt,name=success_bytes,json=successBytes,proto3" json:"success_bytes,omitempty"`
	Nss                    int32   `protobuf:"varint,3,opt,name=nss,proto3" json:"nss,omitempty"`
	RateMbps               uint32  `protobuf:"varint,8,opt,name=rate_mbps,json=rateMbps,proto3" json:"rate_mbps,omitempty"`
	Mcs                    uint32  `protobuf:"varint,5,opt,name=mcs,proto3" json:"mcs,omitempty"`
	Bandwidth              uint32  `protobuf:"varint,6,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	GuardNs                uint32  `protobuf:"varint,7,opt,name=guard_ns,json=guardNs,proto3" json:"guard_ns,omitempty"`
	AirtimeFractionLast_1S float32 `protobuf:"fixed32,9,opt,name=airtime_fraction_last_1s,json=airtimeFractionLast1s,proto3" json:"airtime_fraction_last_1s,omitempty"`
}

func (x *WifiClient_TxStats) Reset() {
	*x = WifiClient_TxStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiClient_TxStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiClient_TxStats) ProtoMessage() {}

func (x *WifiClient_TxStats) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiClient_TxStats.ProtoReflect.Descriptor instead.
func (*WifiClient_TxStats) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{18, 1}
}

func (x *WifiClient_TxStats) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *WifiClient_TxStats) GetSuccessBytes() uint64 {
	if x != nil {
		return x.SuccessBytes
	}
	return 0
}

func (x *WifiClient_TxStats) GetNss() int32 {
	if x != nil {
		return x.Nss
	}
	return 0
}

func (x *WifiClient_TxStats) GetRateMbps() uint32 {
	if x != nil {
		return x.RateMbps
	}
	return 0
}

func (x *WifiClient_TxStats) GetMcs() uint32 {
	if x != nil {
		return x.Mcs
	}
	return 0
}

func (x *WifiClient_TxStats) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *WifiClient_TxStats) GetGuardNs() uint32 {
	if x != nil {
		return x.GuardNs
	}
	return 0
}

func (x *WifiClient_TxStats) GetAirtimeFractionLast_1S() float32 {
	if x != nil {
		return x.AirtimeFractionLast_1S
	}
	return 0
}

type WifiScanResults_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source           WifiScanResults_Network_Source `protobuf:"varint,1,opt,name=source,proto3,enum=SpaceX.API.Device.WifiScanResults_Network_Source" json:"source,omitempty"`
	Ssid             string                         `protobuf:"bytes,2,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Bssid            string                         `protobuf:"bytes,3,opt,name=bssid,proto3" json:"bssid,omitempty"`
	FrequencyGhz     string                         `protobuf:"bytes,4,opt,name=frequency_ghz,json=frequencyGhz,proto3" json:"frequency_ghz,omitempty"`
	Channel          int32                          `protobuf:"varint,5,opt,name=channel,proto3" json:"channel,omitempty"`
	SignalLevelDbm   int32                          `protobuf:"varint,6,opt,name=signal_level_dbm,json=signalLevelDbm,proto3" json:"signal_level_dbm,omitempty"`
	NoiseLevelDbm    int32                          `protobuf:"varint,7,opt,name=noise_level_dbm,json=noiseLevelDbm,proto3" json:"noise_level_dbm,omitempty"`
	HasEncryptionKey bool                           `protobuf:"varint,8,opt,name=has_encryption_key,json=hasEncryptionKey,proto3" json:"has_encryption_key,omitempty"`
	PhyModeStr       string                         `protobuf:"bytes,9,opt,name=phy_mode_str,json=phyModeStr,proto3" json:"phy_mode_str,omitempty"`
}

func (x *WifiScanResults_Network) Reset() {
	*x = WifiScanResults_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiScanResults_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiScanResults_Network) ProtoMessage() {}

func (x *WifiScanResults_Network) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiScanResults_Network.ProtoReflect.Descriptor instead.
func (*WifiScanResults_Network) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{33, 0}
}

func (x *WifiScanResults_Network) GetSource() WifiScanResults_Network_Source {
	if x != nil {
		return x.Source
	}
	return WifiScanResults_Network_UNKNOWN
}

func (x *WifiScanResults_Network) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *WifiScanResults_Network) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *WifiScanResults_Network) GetFrequencyGhz() string {
	if x != nil {
		return x.FrequencyGhz
	}
	return ""
}

func (x *WifiScanResults_Network) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *WifiScanResults_Network) GetSignalLevelDbm() int32 {
	if x != nil {
		return x.SignalLevelDbm
	}
	return 0
}

func (x *WifiScanResults_Network) GetNoiseLevelDbm() int32 {
	if x != nil {
		return x.NoiseLevelDbm
	}
	return 0
}

func (x *WifiScanResults_Network) GetHasEncryptionKey() bool {
	if x != nil {
		return x.HasEncryptionKey
	}
	return false
}

func (x *WifiScanResults_Network) GetPhyModeStr() string {
	if x != nil {
		return x.PhyModeStr
	}
	return ""
}

type WifiPersistentStats_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count                 uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	LastOccurredTimestamp int64  `protobuf:"varint,2,opt,name=last_occurred_timestamp,json=lastOccurredTimestamp,proto3" json:"last_occurred_timestamp,omitempty"`
}

func (x *WifiPersistentStats_Event) Reset() {
	*x = WifiPersistentStats_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiPersistentStats_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiPersistentStats_Event) ProtoMessage() {}

func (x *WifiPersistentStats_Event) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiPersistentStats_Event.ProtoReflect.Descriptor instead.
func (*WifiPersistentStats_Event) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_proto_rawDescGZIP(), []int{35, 0}
}

func (x *WifiPersistentStats_Event) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WifiPersistentStats_Event) GetLastOccurredTimestamp() int64 {
	if x != nil {
		return x.LastOccurredTimestamp
	}
	return 0
}

var File_spacex_api_device_wifi_proto protoreflect.FileDescriptor

var file_spacex_api_device_wifi_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x6e, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x0b, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x95,
	0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x6d,
	0x65, 0x73, 0x68, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4d, 0x65, 0x73, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x0c, 0x57, 0x69, 0x66, 0x69, 0x4d, 0x65,
	0x73, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x63,
	0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x0e, 0x46, 0x72, 0x6f, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x77, 0x69,
	0x66, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0a, 0x77, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x09, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x14, 0x57, 0x69, 0x66, 0x69, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0b, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x77, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x66, 0x0a, 0x15, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x66,
	0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x16, 0x0a, 0x14, 0x57, 0x69, 0x66, 0x69, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x57, 0x0a, 0x15, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x69, 0x66, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x77, 0x69,
	0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6d, 0x0a, 0x1d, 0x57, 0x69, 0x66, 0x69,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x20, 0x0a, 0x1e, 0x57, 0x69, 0x66, 0x69, 0x53,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x18, 0x57, 0x69, 0x66,
	0x69, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x17, 0x0a, 0x15, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x57, 0x69, 0x66,
	0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x68, 0x61, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3e, 0x0a, 0x1b, 0x57, 0x69, 0x66,
	0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa7, 0x03, 0x0a, 0x1c, 0x57, 0x69,
	0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x10, 0x74, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x4d, 0x62,
	0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x10,
	0x72, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x4d, 0x62, 0x70, 0x73,
	0x12, 0x70, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x11, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x62,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x78, 0x52, 0x61, 0x74, 0x65,
	0x4d, 0x62, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x22, 0x69, 0x0a, 0x11, 0x57, 0x69, 0x66, 0x69,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x53, 0x10, 0x03, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6d, 0x73, 0x18, 0xea, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x22, 0x54, 0x0a, 0x1b, 0x57, 0x69, 0x66, 0x69,
	0x4e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x90,
	0x0d, 0x0a, 0x0a, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x07, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x74, 0x78, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x07, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x05, 0x69, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x73, 0x6e, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x73, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x73, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77, 0x71, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x77, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x77, 0x71, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x73, 0x77, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x4e, 0x6f, 0x6e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x65, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x62,
	0x53, 0x74, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69,
	0x62, 0x5f, 0x73, 0x74, 0x65, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x62, 0x53, 0x74, 0x65, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x74, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x74, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x74, 0x6d, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x74, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x94, 0x03, 0x0a, 0x07, 0x52, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x63, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4e, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x69, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x31, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x61, 0x69, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x31,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x1a, 0xfd, 0x01, 0x0a, 0x07, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61,
	0x74, 0x65, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4e,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x15, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x22, 0x3b, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x54,
	0x48, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x46, 0x5f, 0x32, 0x47, 0x48, 0x5a, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x46, 0x5f, 0x35, 0x47, 0x48, 0x5a, 0x10, 0x03, 0x22, 0x42, 0x0a,
	0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10,
	0x03, 0x22, 0x74, 0x0a, 0x10, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x57, 0x69, 0x66, 0x69, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x02, 0x0a,
	0x0e, 0x57, 0x69, 0x66, 0x69, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x42, 0x75, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x78, 0x5f, 0x61, 0x69, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74, 0x78, 0x41, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x78, 0x5f, 0x61, 0x69,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72, 0x78, 0x41, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x62, 0x73, 0x73,
	0x5f, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6f, 0x62, 0x73, 0x73, 0x41, 0x69,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x17, 0x65, 0x64, 0x63, 0x63, 0x61, 0x5f, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x65, 0x64, 0x63, 0x63, 0x61, 0x41, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x03, 0x0a, 0x0a, 0x57, 0x69, 0x66, 0x69, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x6c, 0x79, 0x5f, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x6c, 0x79, 0x46, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x14,
	0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x31, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x61, 0x6e, 0x45,
	0x74, 0x68, 0x53, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x31, 0x30, 0x12, 0x30, 0x0a, 0x15,
	0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x31, 0x30, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x61, 0x6e,
	0x45, 0x74, 0x68, 0x53, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x31, 0x30, 0x30, 0x12, 0x35,
	0x0a, 0x17, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x77, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10,
	0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x52, 0x2b, 0x69,
	0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x32, 0x67, 0x68, 0x7a,
	0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x31, 0x35, 0x64, 0x62, 0x52, 0x2b, 0x69, 0x6e, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x31, 0x35, 0x64, 0x62, 0x52, 0x23, 0x70, 0x6f, 0x6f, 0x72, 0x5f, 0x32, 0x67,
	0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x38, 0x30, 0x64, 0x62, 0x52, 0x23, 0x70, 0x6f,
	0x6f, 0x72, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x38, 0x30, 0x64,
	0x62, 0x22, 0xb9, 0x06, 0x0a, 0x15, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x63, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x63, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x77, 0x61, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x70, 0x76, 0x34, 0x57, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x72,
	0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64,
	0x69, 0x73, 0x68, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x64, 0x69, 0x73, 0x68, 0x50, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x70, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x70, 0x6f, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x70, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x70,
	0x6f, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12,
	0x4c, 0x0a, 0x0e, 0x72, 0x66, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66,
	0x69, 0x42, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0c, 0x72, 0x66, 0x32, 0x67, 0x68, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a,
	0x0e, 0x72, 0x66, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x42,
	0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x72,
	0x66, 0x35, 0x67, 0x68, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x06, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x05, 0x10,
	0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x06, 0x08,
	0xe9, 0x07, 0x10, 0xea, 0x07, 0x4a, 0x06, 0x08, 0xea, 0x07, 0x10, 0xeb, 0x07, 0x4a, 0x06, 0x08,
	0xee, 0x07, 0x10, 0xef, 0x07, 0x4a, 0x06, 0x08, 0xef, 0x07, 0x10, 0xf0, 0x07, 0x22, 0x56, 0x0a,
	0x17, 0x57, 0x69, 0x66, 0x69, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x57, 0x69, 0x66, 0x69, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x77, 0x69, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x77, 0x69, 0x66, 0x69, 0x12, 0x38, 0x0a, 0x04,
	0x64, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x04, 0x64, 0x69, 0x73, 0x68, 0x22, 0x32, 0x0a, 0x17, 0x57, 0x69, 0x66, 0x69, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x68, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x10, 0x57, 0x69,
	0x66, 0x69, 0x4e, 0x65, 0x77, 0x50, 0x65, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb1, 0x07, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x61, 0x6e, 0x4d, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65,
	0x76, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x4d, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x73, 0x5f, 0x35,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x4d, 0x65, 0x61, 0x6e, 0x4d, 0x73, 0x35, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x73, 0x5f, 0x31, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x61,
	0x6e, 0x4d, 0x73, 0x31, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x73, 0x5f, 0x31, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x61, 0x6e, 0x4d, 0x73,
	0x31, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x35, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x35,
	0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x31,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x31, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x31, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x31, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x73, 0x4f, 0x75, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x32, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x32, 0x73, 0x4f, 0x75, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x35, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x35, 0x73, 0x4f, 0x75, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x35, 0x73, 0x5f, 0x6f, 0x75, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x35, 0x73, 0x4f, 0x75,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x36, 0x30, 0x73, 0x5f, 0x6f,
	0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x36, 0x30, 0x73,
	0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x33, 0x30, 0x30,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x33, 0x30, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x68, 0x61,
	0x70, 0x70, 0x79, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x31, 0x73, 0x5f, 0x31, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x31, 0x73, 0x31, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x68, 0x61, 0x70, 0x70, 0x79, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x5f, 0x32, 0x73, 0x5f, 0x31, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x32, 0x73, 0x31, 0x64,
	0x12, 0x29, 0x0a, 0x11, 0x68, 0x61, 0x70, 0x70, 0x79, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f,
	0x35, 0x73, 0x5f, 0x31, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x68, 0x61, 0x70,
	0x70, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x35, 0x73, 0x31, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x57,
	0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x1a, 0x57, 0x69, 0x66, 0x69,
	0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xa8, 0x01, 0x0a, 0x1a, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0c, 0x77, 0x69,
	0x66, 0x69, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0xf2, 0x03, 0x0a, 0x0f, 0x57,
	0x69, 0x66, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x46,
	0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a, 0x96, 0x03, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x67, 0x68, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x68, 0x7a, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x62, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x62, 0x6d,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x64, 0x62, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x6f, 0x69, 0x73, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x62, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x68, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x68,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x32, 0x5f, 0x34, 0x47, 0x48, 0x5a, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x35, 0x47, 0x48, 0x5a, 0x10, 0x02, 0x22,
	0xde, 0x01, 0x0a, 0x0b, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x37, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x42, 0x61,
	0x6e, 0x64, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x22, 0x38, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x10,
	0x0a, 0x0c, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x32, 0x5f, 0x34, 0x47, 0x48, 0x5a, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x35, 0x47, 0x48, 0x5a, 0x10, 0x02,
	0x22, 0x83, 0x05, 0x0a, 0x13, 0x57, 0x69, 0x66, 0x69, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x19, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x5f, 0x75,
	0x6e, 0x70, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x55, 0x6e, 0x70, 0x6c, 0x75,
	0x67, 0x12, 0x60, 0x0a, 0x15, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x13,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x7d, 0x0a, 0x25, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x6b, 0x0a, 0x1b, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x18, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a,
	0x55, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5e, 0x0a, 0x1e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xa9, 0x5c, 0x0a, 0x21, 0x73, 0x74, 0x61, 0x72, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x6c,
	0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x32, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x43, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x5f, 0x68, 0x77, 0x5f, 0x67,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x79, 0x73, 0x48, 0x77, 0x47, 0x65, 0x6e,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x5f, 0x73, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x73, 0x79, 0x73, 0x53, 0x77, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x5f, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x79, 0x73, 0x49, 0x73, 0x44, 0x65, 0x76, 0x12, 0x40,
	0x0a, 0x0d, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x66, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x64, 0x73,
	0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x6b, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x4d, 0x65, 0x6d, 0x46,
	0x72, 0x65, 0x65, 0x4b, 0x62, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x5f, 0x62, 0x6f, 0x6f,
	0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x42, 0x6f,
	0x6f, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x79, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x73, 0x79, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x5f, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x73, 0x79, 0x73, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x56, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x6e, 0x74, 0x69, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x5f,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32,
	0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x52, 0x73, 0x73, 0x69, 0x12,
	0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x32, 0x52, 0x73, 0x73, 0x69, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x5f,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32,
	0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x52, 0x73, 0x73, 0x69, 0x12,
	0x53, 0x0a, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x49, 0x66, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x32, 0x67, 0x68, 0x7a, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x75, 0x73, 0x79, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f,
	0x32, 0x67, 0x68, 0x7a, 0x5f, 0x65, 0x64, 0x63, 0x63, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67,
	0x68, 0x7a, 0x45, 0x64, 0x63, 0x63, 0x61, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x6b, 0x0a, 0x24, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x73, 0x73, 0x5f, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x42, 0x73, 0x73, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x16, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4f,
	0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x5a, 0x0a, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72,
	0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x6f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x20, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x61, 0x0a, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72,
	0x78, 0x5f, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68,
	0x7a, 0x52, 0x78, 0x41, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68,
	0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a,
	0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x73, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x74, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f,
	0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x1f, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x76, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x41, 0x69, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35,
	0x67, 0x68, 0x7a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x31, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x52, 0x73,
	0x73, 0x69, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18,
	0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x52, 0x73, 0x73, 0x69, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x33, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x52, 0x73,
	0x73, 0x69, 0x12, 0x53, 0x0a, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x7b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x49, 0x66, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x79,
	0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x75, 0x73, 0x79,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x65, 0x64, 0x63, 0x63, 0x61, 0x5f, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x35, 0x67, 0x68, 0x7a, 0x45, 0x64, 0x63, 0x63, 0x61, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x24, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x73,
	0x73, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x42, 0x73, 0x73, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72,
	0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x52,
	0x0a, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35,
	0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x63, 0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x41, 0x69, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x14, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35,
	0x67, 0x68, 0x7a, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x50,
	0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x63, 0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f,
	0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f,
	0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x41, 0x69, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x18, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70,
	0x12, 0x55, 0x0a, 0x18, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0xc9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x60, 0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x64,
	0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c,
	0x44, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x1e, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0xcb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x44, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x6f, 0x0a, 0x25, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x6f, 0x0a, 0x25,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x53, 0x0a,
	0x17, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f,
	0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e,
	0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45,
	0x74, 0x68, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x18, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x60, 0x0a, 0x1e, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e,
	0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c,
	0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0xb0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45,
	0x74, 0x68, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x55, 0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e,
	0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb2,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74,
	0x68, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0xb3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57,
	0x0a, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xb4, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x15, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x60,
	0x0a, 0x1e, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e,
	0x45, 0x74, 0x68, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x53, 0x0a, 0x17, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65,
	0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xb7, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57,
	0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x55,
	0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb9, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40,
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x91,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x67, 0x68, 0x7a,
	0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x35, 0x67,
	0x68, 0x7a, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x74,
	0x68, 0x18, 0x93, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x45,
	0x74, 0x68, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x94, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x15,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x95, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x32, 0x67, 0x68, 0x7a, 0x12,
	0x51, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x96, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x35, 0x67,
	0x68, 0x7a, 0x12, 0x4f, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x18, 0x97, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x68, 0x6f, 0x70, 0x73,
	0x18, 0x98, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x48, 0x6f, 0x70, 0x73, 0x12,
	0x57, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x99, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x48, 0x6f, 0x70, 0x52, 0x73, 0x73,
	0x69, 0x41, 0x76, 0x67, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x68,
	0x4f, 0x6e, 0x65, 0x48, 0x6f, 0x70, 0x52, 0x73, 0x73, 0x69, 0x41, 0x76, 0x67, 0x35, 0x67, 0x68,
	0x7a, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18,
	0x9b, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x54, 0x77, 0x6f, 0x48, 0x6f, 0x70, 0x52,
	0x73, 0x73, 0x69, 0x41, 0x76, 0x67, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f,
	0x61, 0x76, 0x67, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x9c, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x65,
	0x73, 0x68, 0x54, 0x77, 0x6f, 0x48, 0x6f, 0x70, 0x52, 0x73, 0x73, 0x69, 0x41, 0x76, 0x67, 0x35,
	0x67, 0x68, 0x7a, 0x12, 0x65, 0x0a, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x31, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x21, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x32, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18,
	0xd9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1c, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x32, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x65, 0x0a, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x35, 0x73, 0x5f,
	0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xda, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x70, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x35, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x22, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x36, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xdb,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1d, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x36, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x69, 0x0a, 0x23, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x33, 0x30, 0x30,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xdc, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x33, 0x30, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0e,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xdd,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x50, 0x0a, 0x16, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0xde, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x70, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x31, 0x68, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0xdf, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x6e, 0x0a, 0x26, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x31, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xe2, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x73, 0x4f, 0x75, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x26, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x32, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xe3, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x32, 0x73, 0x4f, 0x75, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x26, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x35, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xe4, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x35, 0x73, 0x4f, 0x75, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x27, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x36, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xe5,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x36, 0x30, 0x73, 0x4f,
	0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x72, 0x0a, 0x28, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69,
	0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x33, 0x30, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67,
	0x65, 0x18, 0xe6, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x22, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x33,
	0x30, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0xe7, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x44, 0x72,
	0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x1b, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0xe8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x70, 0x69, 0x6e, 0x67, 0x44,
	0x69, 0x73, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x31,
	0x68, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xe9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x6e, 0x0a, 0x25, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x6d, 0x62, 0x70, 0x73, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x6a, 0x0a, 0x23, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62,
	0x70, 0x73, 0x18, 0xbd, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x5d, 0x0a, 0x1c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0xbe, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x73, 0x73, 0x69, 0x12, 0x6a, 0x0a, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xbf, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x57, 0x69, 0x66, 0x69, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62,
	0x70, 0x73, 0x12, 0x66, 0x0a, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xc0, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x57, 0x69, 0x66, 0x69,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x6e, 0x0a, 0x25, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d,
	0x62, 0x70, 0x73, 0x18, 0xc1, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x6a, 0x0a, 0x23, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70,
	0x73, 0x18, 0xc2, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x5d, 0x0a, 0x1c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0xc3, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x73, 0x73, 0x69, 0x12, 0x60, 0x0a, 0x1d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0xc4, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x66, 0x61, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x69, 0x18, 0xc5, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x75, 0x69, 0x12, 0x63, 0x0a, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xc6, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x1f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xc7, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x6f, 0x0a, 0x25, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xc8, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x65, 0x0a, 0x21, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63,
	0x70, 0x5f, 0x38, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70,
	0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa0, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x38, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x65, 0x0a, 0x21, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x38, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa1, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x38, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x61,
	0x0a, 0x1f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f,
	0x38, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76,
	0x67, 0x18, 0xa2, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x54, 0x63, 0x70, 0x38, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76,
	0x67, 0x12, 0x61, 0x0a, 0x1f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x63, 0x70, 0x5f, 0x38, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa3, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x38, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70,
	0x73, 0x4d, 0x61, 0x78, 0x12, 0x67, 0x0a, 0x22, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x36, 0x34, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa4, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x36, 0x34, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x67, 0x0a,
	0x22, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x36,
	0x34, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0xa5, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x63, 0x70, 0x36, 0x34, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x62, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x63, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x36, 0x34, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa6, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x36, 0x34, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x63, 0x0a, 0x20, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x36, 0x34, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0xa7, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63,
	0x70, 0x36, 0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78,
	0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x68, 0x43, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x4f, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x73, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x49, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x73, 0x5f, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xec, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x41, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x44, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xef, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x49,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x66, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x1e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0xf1, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x19, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x88, 0x5e, 0x0a, 0x22, 0x73, 0x74, 0x61, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x32, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x6f, 0x75,
	0x72, 0x12, 0x51, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x90,
	0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x5f, 0x68, 0x77, 0x5f, 0x67,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x79, 0x73, 0x48, 0x77, 0x47, 0x65, 0x6e,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x5f, 0x73, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x73, 0x79, 0x73, 0x53, 0x77, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x5f, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x79, 0x73, 0x49, 0x73, 0x44, 0x65, 0x76, 0x12, 0x40,
	0x0a, 0x0d, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x66, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x64, 0x73,
	0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x6b, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x4d, 0x65, 0x6d, 0x46,
	0x72, 0x65, 0x65, 0x4b, 0x62, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x5f, 0x62, 0x6f, 0x6f,
	0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x42, 0x6f,
	0x6f, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x79, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x73, 0x79, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x5f, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x73, 0x79, 0x73, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x56, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x6e, 0x74, 0x69, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x5f,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32,
	0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x52, 0x73, 0x73, 0x69, 0x12,
	0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x32, 0x52, 0x73, 0x73, 0x69, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x5f,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32,
	0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x52, 0x73, 0x73, 0x69, 0x12,
	0x53, 0x0a, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x49, 0x66, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x32, 0x67, 0x68, 0x7a, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x75, 0x73, 0x79, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f,
	0x32, 0x67, 0x68, 0x7a, 0x5f, 0x65, 0x64, 0x63, 0x63, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67,
	0x68, 0x7a, 0x45, 0x64, 0x63, 0x63, 0x61, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x6b, 0x0a, 0x24, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x73, 0x73, 0x5f, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x42, 0x73, 0x73, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32,
	0x67, 0x68, 0x7a, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32,
	0x67, 0x68, 0x7a, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x15,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x59, 0x0a, 0x1b,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x1f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x61, 0x69,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x41,
	0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x16,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4e,
	0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x62,
	0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68,
	0x7a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x61, 0x0a, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68,
	0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x32, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x41, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f,
	0x35, 0x67, 0x68, 0x7a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x77, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67,
	0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x5f, 0x72, 0x73, 0x73, 0x69,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x31, 0x52, 0x73, 0x73, 0x69, 0x12, 0x56, 0x0a, 0x19, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x32, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x32, 0x52,
	0x73, 0x73, 0x69, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67,
	0x68, 0x7a, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x5f, 0x72, 0x73, 0x73, 0x69,
	0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x33, 0x52, 0x73, 0x73, 0x69, 0x12, 0x53, 0x0a, 0x17, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x49, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x5f, 0x0a, 0x1e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68,
	0x7a, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x75, 0x73, 0x79, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x5f, 0x65, 0x64, 0x63, 0x63, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x45, 0x64,
	0x63, 0x63, 0x61, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x24, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67,
	0x68, 0x7a, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x73, 0x73,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52,
	0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a,
	0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67,
	0x68, 0x7a, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x1b, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x63, 0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73,
	0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x1f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x72, 0x78, 0x5f, 0x61, 0x69,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x84,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x52, 0x78,
	0x41, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x14, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74,
	0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a,
	0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x63, 0x0a, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x1f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x78, 0x5f, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x78, 0x41, 0x69, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x18, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x12, 0x55, 0x0a, 0x18, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68,
	0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x60, 0x0a, 0x1e, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0xca, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x44, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x1e, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0xcb, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x44, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x6f, 0x0a,
	0x25, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x73, 0x32, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x6f,
	0x0a, 0x25, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x5f, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x52, 0x0a, 0x17, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74,
	0x68, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61,
	0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45,
	0x74, 0x68, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x5f, 0x0a, 0x1e, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f,
	0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c,
	0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e,
	0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xb0, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x13, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54,
	0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c,
	0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x54,
	0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77,
	0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0xb3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x13, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74,
	0x68, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x69, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xb4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x54, 0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65,
	0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb5, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x14, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x1e, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x69, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x52, 0x78, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x69, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0xb7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61,
	0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x69,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x61,
	0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0xb9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x61, 0x6e, 0x45, 0x74,
	0x68, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x32, 0x67,
	0x68, 0x7a, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x32, 0x67, 0x68, 0x7a, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x35, 0x67, 0x68, 0x7a, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x65, 0x74, 0x68, 0x18, 0x93, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x94, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0x95, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x32,
	0x67, 0x68, 0x7a, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x96, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x4f, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x18, 0x97,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x68, 0x5f,
	0x68, 0x6f, 0x70, 0x73, 0x18, 0x98, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x48,
	0x6f, 0x70, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x65, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x32, 0x67, 0x68,
	0x7a, 0x18, 0x99, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x48, 0x6f,
	0x70, 0x52, 0x73, 0x73, 0x69, 0x41, 0x76, 0x67, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x57, 0x0a, 0x1a,
	0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73, 0x73,
	0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15,
	0x6d, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x48, 0x6f, 0x70, 0x52, 0x73, 0x73, 0x69, 0x41, 0x76,
	0x67, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x77,
	0x6f, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x18, 0x9b, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x54, 0x77, 0x6f,
	0x48, 0x6f, 0x70, 0x52, 0x73, 0x73, 0x69, 0x41, 0x76, 0x67, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x57,
	0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x72,
	0x73, 0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x9c, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x54, 0x77, 0x6f, 0x48, 0x6f, 0x70, 0x52, 0x73, 0x73, 0x69,
	0x41, 0x76, 0x67, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x65, 0x0a, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x31, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xd8, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1c, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e,
	0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x65,
	0x0a, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x32, 0x73, 0x5f, 0x6f, 0x75, 0x74,
	0x61, 0x67, 0x65, 0x18, 0xd9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x32, 0x73, 0x4f,
	0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x35, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xda, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x35, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x22,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x36, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61,
	0x67, 0x65, 0x18, 0xdb, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x36, 0x30, 0x73, 0x4f,
	0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x23, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x33, 0x30, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x18, 0xdc, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1e, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e,
	0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x33, 0x30, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x42, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0xdd, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0xde,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x31, 0x68, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xdf, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4d, 0x0a, 0x14, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18,
	0xea, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x4c, 0x61, 0x73, 0x74, 0x31, 0x68, 0x12, 0x6e, 0x0a, 0x26, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65,
	0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x31, 0x73,
	0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x26, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x32, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65,
	0x18, 0xe3, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x32, 0x73,
	0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x26, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x35, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67, 0x65,
	0x18, 0xe4, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x35, 0x73,
	0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x27, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x36, 0x30, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x61, 0x67,
	0x65, 0x18, 0xe5, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x36,
	0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x72, 0x0a, 0x28, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x33, 0x30, 0x30, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x61, 0x67, 0x65, 0x18, 0xe6, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x22, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x73, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x33, 0x30, 0x30, 0x73, 0x4f, 0x75, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x13,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0xe7, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73,
	0x68, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x1b, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0xe8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x70, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x31, 0x68, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x68, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xe9, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x56,
	0x0a, 0x19, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0xeb, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x4c, 0x61, 0x73, 0x74, 0x31, 0x68, 0x12, 0x6e, 0x0a, 0x25, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18,
	0xbc, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x6a, 0x0a, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xbd, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62,
	0x70, 0x73, 0x12, 0x5d, 0x0a, 0x1c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x73,
	0x73, 0x69, 0x18, 0xbe, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x73, 0x73,
	0x69, 0x12, 0x6a, 0x0a, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xbf, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x57, 0x69, 0x66,
	0x69, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x66, 0x0a,
	0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62,
	0x70, 0x73, 0x18, 0xc0, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x57, 0x69, 0x66, 0x69, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x6e, 0x0a, 0x25, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xc1,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x6a, 0x0a, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0xc2, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70,
	0x73, 0x12, 0x5d, 0x0a, 0x1c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x73, 0x73,
	0x69, 0x18, 0xc3, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x73, 0x69,
	0x12, 0x60, 0x0a, 0x1d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x66, 0x61, 0x63,
	0x65, 0x18, 0xc4, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x5c, 0x0a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x75,
	0x69, 0x18, 0xc5, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x69,
	0x12, 0x63, 0x0a, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0xc6, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x1f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xc7, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x25, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0xc8, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x21, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x38, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67,
	0x18, 0xa0, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54,
	0x63, 0x70, 0x38, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41,
	0x76, 0x67, 0x12, 0x65, 0x0a, 0x21, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x63, 0x70, 0x5f, 0x38, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d,
	0x62, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa1, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x38, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x61, 0x0a, 0x1f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x38, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa2, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x38, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x61, 0x0a, 0x1f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x38, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0xa3, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63,
	0x70, 0x38, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12,
	0x67, 0x0a, 0x22, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70,
	0x5f, 0x36, 0x34, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70,
	0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa4, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x36, 0x34, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x67, 0x0a, 0x22, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x36, 0x34, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa5,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70,
	0x36, 0x34, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x4d, 0x61,
	0x78, 0x12, 0x63, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x63, 0x70, 0x5f, 0x36, 0x34, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70,
	0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0xa6, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x36, 0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x62, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x63, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x36, 0x34, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0xa7, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x54, 0x63, 0x70, 0x36, 0x34, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x3f, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x68, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x84, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x68, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x15,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x49, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61,
	0x6e, 0x64, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0xea,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x73, 0x41, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x6e, 0x73,
	0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x44, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x41, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0xf0, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x66, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xec, 0x01,
	0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x32, 0x5c, 0x0a, 0x04,
	0x4d, 0x65, 0x73, 0x68, 0x12, 0x54, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x1a, 0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x28, 0x01, 0x30, 0x01, 0x42, 0x17, 0x5a, 0x15, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spacex_api_device_wifi_proto_rawDescOnce sync.Once
	file_spacex_api_device_wifi_proto_rawDescData = file_spacex_api_device_wifi_proto_rawDesc
)

func file_spacex_api_device_wifi_proto_rawDescGZIP() []byte {
	file_spacex_api_device_wifi_proto_rawDescOnce.Do(func() {
		file_spacex_api_device_wifi_proto_rawDescData = protoimpl.X.CompressGZIP(file_spacex_api_device_wifi_proto_rawDescData)
	})
	return file_spacex_api_device_wifi_proto_rawDescData
}

var file_spacex_api_device_wifi_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_spacex_api_device_wifi_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_spacex_api_device_wifi_proto_goTypes = []interface{}{
	(WifiGetClientHistoryResponse_WifiLimitedReason)(0), // 0: SpaceX.API.Device.WifiGetClientHistoryResponse.WifiLimitedReason
	(WifiClient_Interface)(0),                           // 1: SpaceX.API.Device.WifiClient.Interface
	(WifiClient_Role)(0),                                // 2: SpaceX.API.Device.WifiClient.Role
	(WifiScanResults_Network_Source)(0),                 // 3: SpaceX.API.Device.WifiScanResults.Network.Source
	(WifiNetwork_Band)(0),                               // 4: SpaceX.API.Device.WifiNetwork.Band
	(*WifiClients)(nil),                                 // 5: SpaceX.API.Device.WifiClients
	(*ToController)(nil),                                // 6: SpaceX.API.Device.ToController
	(*WifiMeshJoin)(nil),                                // 7: SpaceX.API.Device.WifiMeshJoin
	(*FromController)(nil),                              // 8: SpaceX.API.Device.FromController
	(*WifiSetConfigRequest)(nil),                        // 9: SpaceX.API.Device.WifiSetConfigRequest
	(*WifiSetConfigResponse)(nil),                       // 10: SpaceX.API.Device.WifiSetConfigResponse
	(*WifiGetConfigRequest)(nil),                        // 11: SpaceX.API.Device.WifiGetConfigRequest
	(*WifiGetConfigResponse)(nil),                       // 12: SpaceX.API.Device.WifiGetConfigResponse
	(*WifiSetMeshDeviceTrustRequest)(nil),               // 13: SpaceX.API.Device.WifiSetMeshDeviceTrustRequest
	(*WifiSetMeshDeviceTrustResponse)(nil),              // 14: SpaceX.API.Device.WifiSetMeshDeviceTrustResponse
	(*WifiSetMeshConfigRequest)(nil),                    // 15: SpaceX.API.Device.WifiSetMeshConfigRequest
	(*WifiSetMeshConfigResponse)(nil),                   // 16: SpaceX.API.Device.WifiSetMeshConfigResponse
	(*WifiGetClientsRequest)(nil),                       // 17: SpaceX.API.Device.WifiGetClientsRequest
	(*WifiGetClientsResponse)(nil),                      // 18: SpaceX.API.Device.WifiGetClientsResponse
	(*WifiGetClientHistoryRequest)(nil),                 // 19: SpaceX.API.Device.WifiGetClientHistoryRequest
	(*WifiGetClientHistoryResponse)(nil),                // 20: SpaceX.API.Device.WifiGetClientHistoryResponse
	(*WifiGetHistoryResponse)(nil),                      // 21: SpaceX.API.Device.WifiGetHistoryResponse
	(*WifiNewClientConnectedEvent)(nil),                 // 22: SpaceX.API.Device.WifiNewClientConnectedEvent
	(*WifiClient)(nil),                                  // 23: SpaceX.API.Device.WifiClient
	(*WifiSetupRequest)(nil),                            // 24: SpaceX.API.Device.WifiSetupRequest
	(*WifiSetupResponse)(nil),                           // 25: SpaceX.API.Device.WifiSetupResponse
	(*WifiBandStatus)(nil),                              // 26: SpaceX.API.Device.WifiBandStatus
	(*WifiAlerts)(nil),                                  // 27: SpaceX.API.Device.WifiAlerts
	(*WifiGetStatusResponse)(nil),                       // 28: SpaceX.API.Device.WifiGetStatusResponse
	(*WifiAuthenticateRequest)(nil),                     // 29: SpaceX.API.Device.WifiAuthenticateRequest
	(*WifiAuthenticateResponse)(nil),                    // 30: SpaceX.API.Device.WifiAuthenticateResponse
	(*WifiAccountBondingEvent)(nil),                     // 31: SpaceX.API.Device.WifiAccountBondingEvent
	(*WifiNewPeerEvent)(nil),                            // 32: SpaceX.API.Device.WifiNewPeerEvent
	(*PingMetrics)(nil),                                 // 33: SpaceX.API.Device.PingMetrics
	(*WifiGetPingMetricsRequest)(nil),                   // 34: SpaceX.API.Device.WifiGetPingMetricsRequest
	(*WifiGetPingMetricsResponse)(nil),                  // 35: SpaceX.API.Device.WifiGetPingMetricsResponse
	(*WifiGetDiagnosticsRequest)(nil),                   // 36: SpaceX.API.Device.WifiGetDiagnosticsRequest
	(*WifiGetDiagnosticsResponse)(nil),                  // 37: SpaceX.API.Device.WifiGetDiagnosticsResponse
	(*WifiScanResults)(nil),                             // 38: SpaceX.API.Device.WifiScanResults
	(*WifiNetwork)(nil),                                 // 39: SpaceX.API.Device.WifiNetwork
	(*WifiPersistentStats)(nil),                         // 40: SpaceX.API.Device.WifiPersistentStats
	(*WifiGetPersistentStatsResponse)(nil),              // 41: SpaceX.API.Device.WifiGetPersistentStatsResponse
	(*StarlinkRouterHourlyMetricsV2)(nil),               // 42: SpaceX.API.Device.starlink_router_hourly_metrics_v2
	(*StarlinkRoutersHourlyMetricsV2)(nil),              // 43: SpaceX.API.Device.starlink_routers_hourly_metrics_v2
	(*StarlinkRouterAlerts)(nil),                        // 44: SpaceX.API.Device.starlink_router_alerts
	(*WifiClient_RxStats)(nil),                          // 45: SpaceX.API.Device.WifiClient.RxStats
	(*WifiClient_TxStats)(nil),                          // 46: SpaceX.API.Device.WifiClient.TxStats
	(*WifiScanResults_Network)(nil),                     // 47: SpaceX.API.Device.WifiScanResults.Network
	(*WifiPersistentStats_Event)(nil),                   // 48: SpaceX.API.Device.WifiPersistentStats.Event
	(*WifiConfig)(nil),                                  // 49: SpaceX.API.Device.WifiConfig
	(MeshAuth)(0),                                       // 50: SpaceX.API.Device.MeshAuth
	(*MeshConfig)(nil),                                  // 51: SpaceX.API.Device.MeshConfig
	(*DeviceInfo)(nil),                                  // 52: SpaceX.API.Device.DeviceInfo
	(*DeviceState)(nil),                                 // 53: SpaceX.API.Device.DeviceState
	(*SignedData)(nil),                                  // 54: SpaceX.API.Device.SignedData
	(*ChallengeResponse)(nil),                           // 55: SpaceX.API.Device.ChallengeResponse
	(*wrapperspb.StringValue)(nil),                      // 56: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),                      // 57: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),                        // 58: google.protobuf.BoolValue
	(*wrapperspb.FloatValue)(nil),                       // 59: google.protobuf.FloatValue
	(*wrapperspb.Int32Value)(nil),                       // 60: google.protobuf.Int32Value
	(*telemetron.TimestampInfo)(nil),                    // 61: SpaceX.API.Telemetron.Public.Common.TimestampInfo
	(*wrapperspb.Int64Value)(nil),                       // 62: google.protobuf.Int64Value
}
var file_spacex_api_device_wifi_proto_depIdxs = []int32{
	23,  // 0: SpaceX.API.Device.WifiClients.clients:type_name -> SpaceX.API.Device.WifiClient
	5,   // 1: SpaceX.API.Device.ToController.clients:type_name -> SpaceX.API.Device.WifiClients
	7,   // 2: SpaceX.API.Device.ToController.mesh_join:type_name -> SpaceX.API.Device.WifiMeshJoin
	49,  // 3: SpaceX.API.Device.FromController.wifi_config:type_name -> SpaceX.API.Device.WifiConfig
	49,  // 4: SpaceX.API.Device.WifiSetConfigRequest.wifi_config:type_name -> SpaceX.API.Device.WifiConfig
	49,  // 5: SpaceX.API.Device.WifiSetConfigResponse.updated_wifi_config:type_name -> SpaceX.API.Device.WifiConfig
	49,  // 6: SpaceX.API.Device.WifiGetConfigResponse.wifi_config:type_name -> SpaceX.API.Device.WifiConfig
	50,  // 7: SpaceX.API.Device.WifiSetMeshDeviceTrustRequest.auth:type_name -> SpaceX.API.Device.MeshAuth
	51,  // 8: SpaceX.API.Device.WifiSetMeshConfigRequest.mesh_config:type_name -> SpaceX.API.Device.MeshConfig
	23,  // 9: SpaceX.API.Device.WifiGetClientsResponse.clients:type_name -> SpaceX.API.Device.WifiClient
	0,   // 10: SpaceX.API.Device.WifiGetClientHistoryResponse.throughput_limited:type_name -> SpaceX.API.Device.WifiGetClientHistoryResponse.WifiLimitedReason
	23,  // 11: SpaceX.API.Device.WifiNewClientConnectedEvent.client:type_name -> SpaceX.API.Device.WifiClient
	45,  // 12: SpaceX.API.Device.WifiClient.rx_stats:type_name -> SpaceX.API.Device.WifiClient.RxStats
	46,  // 13: SpaceX.API.Device.WifiClient.tx_stats:type_name -> SpaceX.API.Device.WifiClient.TxStats
	1,   // 14: SpaceX.API.Device.WifiClient.iface:type_name -> SpaceX.API.Device.WifiClient.Interface
	2,   // 15: SpaceX.API.Device.WifiClient.role:type_name -> SpaceX.API.Device.WifiClient.Role
	52,  // 16: SpaceX.API.Device.WifiGetStatusResponse.device_info:type_name -> SpaceX.API.Device.DeviceInfo
	53,  // 17: SpaceX.API.Device.WifiGetStatusResponse.device_state:type_name -> SpaceX.API.Device.DeviceState
	26,  // 18: SpaceX.API.Device.WifiGetStatusResponse.rf_2ghz_status:type_name -> SpaceX.API.Device.WifiBandStatus
	26,  // 19: SpaceX.API.Device.WifiGetStatusResponse.rf_5ghz_status:type_name -> SpaceX.API.Device.WifiBandStatus
	27,  // 20: SpaceX.API.Device.WifiGetStatusResponse.alerts:type_name -> SpaceX.API.Device.WifiAlerts
	54,  // 21: SpaceX.API.Device.WifiAuthenticateRequest.challenge:type_name -> SpaceX.API.Device.SignedData
	55,  // 22: SpaceX.API.Device.WifiAuthenticateResponse.wifi:type_name -> SpaceX.API.Device.ChallengeResponse
	55,  // 23: SpaceX.API.Device.WifiAuthenticateResponse.dish:type_name -> SpaceX.API.Device.ChallengeResponse
	33,  // 24: SpaceX.API.Device.WifiGetPingMetricsResponse.internet:type_name -> SpaceX.API.Device.PingMetrics
	38,  // 25: SpaceX.API.Device.WifiGetDiagnosticsResponse.network_scan:type_name -> SpaceX.API.Device.WifiScanResults
	39,  // 26: SpaceX.API.Device.WifiGetDiagnosticsResponse.wifi_networks:type_name -> SpaceX.API.Device.WifiNetwork
	47,  // 27: SpaceX.API.Device.WifiScanResults.networks:type_name -> SpaceX.API.Device.WifiScanResults.Network
	4,   // 28: SpaceX.API.Device.WifiNetwork.band:type_name -> SpaceX.API.Device.WifiNetwork.Band
	48,  // 29: SpaceX.API.Device.WifiPersistentStats.factory_reset_button:type_name -> SpaceX.API.Device.WifiPersistentStats.Event
	48,  // 30: SpaceX.API.Device.WifiPersistentStats.factory_reset_plug_unplug:type_name -> SpaceX.API.Device.WifiPersistentStats.Event
	48,  // 31: SpaceX.API.Device.WifiPersistentStats.factory_reset_command:type_name -> SpaceX.API.Device.WifiPersistentStats.Event
	48,  // 32: SpaceX.API.Device.WifiPersistentStats.factory_reset_failed_load_wifi_config:type_name -> SpaceX.API.Device.WifiPersistentStats.Event
	48,  // 33: SpaceX.API.Device.WifiPersistentStats.reboot_from_software_update:type_name -> SpaceX.API.Device.WifiPersistentStats.Event
	40,  // 34: SpaceX.API.Device.WifiGetPersistentStatsResponse.stats:type_name -> SpaceX.API.Device.WifiPersistentStats
	56,  // 35: SpaceX.API.Device.starlink_router_hourly_metrics_v2.id:type_name -> google.protobuf.StringValue
	56,  // 36: SpaceX.API.Device.starlink_router_hourly_metrics_v2.timestamp_date:type_name -> google.protobuf.StringValue
	57,  // 37: SpaceX.API.Device.starlink_router_hourly_metrics_v2.timestamp_hour:type_name -> google.protobuf.UInt32Value
	57,  // 38: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_hw_gen:type_name -> google.protobuf.UInt32Value
	56,  // 39: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_sw:type_name -> google.protobuf.StringValue
	56,  // 40: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_country:type_name -> google.protobuf.StringValue
	58,  // 41: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_is_dev:type_name -> google.protobuf.BoolValue
	57,  // 42: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_alloc_fds:type_name -> google.protobuf.UInt32Value
	59,  // 43: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_cpu_usage:type_name -> google.protobuf.FloatValue
	59,  // 44: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_mem_free_kb:type_name -> google.protobuf.FloatValue
	60,  // 45: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_bootcount:type_name -> google.protobuf.Int32Value
	58,  // 46: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_partitions_equal:type_name -> google.protobuf.BoolValue
	57,  // 47: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_uptime_seconds:type_name -> google.protobuf.UInt32Value
	60,  // 48: SpaceX.API.Device.starlink_router_hourly_metrics_v2.sys_anti_rollback_version:type_name -> google.protobuf.Int32Value
	57,  // 49: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_channel:type_name -> google.protobuf.UInt32Value
	59,  // 50: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_antenna1_rssi:type_name -> google.protobuf.FloatValue
	59,  // 51: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_antenna2_rssi:type_name -> google.protobuf.FloatValue
	59,  // 52: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_antenna3_rssi:type_name -> google.protobuf.FloatValue
	57,  // 53: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_iface_count:type_name -> google.protobuf.UInt32Value
	59,  // 54: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_chan_busy_fraction:type_name -> google.protobuf.FloatValue
	59,  // 55: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_edcca_fraction:type_name -> google.protobuf.FloatValue
	59,  // 56: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_overlapping_bss_fraction:type_name -> google.protobuf.FloatValue
	57,  // 57: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_rx_bytes:type_name -> google.protobuf.UInt32Value
	57,  // 58: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_rx_packets:type_name -> google.protobuf.UInt32Value
	57,  // 59: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_rx_errors:type_name -> google.protobuf.UInt32Value
	57,  // 60: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_rx_frame_errors:type_name -> google.protobuf.UInt32Value
	59,  // 61: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_rx_packet_error_rate:type_name -> google.protobuf.FloatValue
	59,  // 62: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_rx_airtime_fraction:type_name -> google.protobuf.FloatValue
	57,  // 63: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_tx_bytes:type_name -> google.protobuf.UInt32Value
	57,  // 64: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_tx_packets:type_name -> google.protobuf.UInt32Value
	57,  // 65: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_tx_errors:type_name -> google.protobuf.UInt32Value
	59,  // 66: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_tx_packet_error_rate:type_name -> google.protobuf.FloatValue
	59,  // 67: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_tx_airtime_fraction:type_name -> google.protobuf.FloatValue
	57,  // 68: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_channel:type_name -> google.protobuf.UInt32Value
	59,  // 69: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_antenna1_rssi:type_name -> google.protobuf.FloatValue
	59,  // 70: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_antenna2_rssi:type_name -> google.protobuf.FloatValue
	59,  // 71: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_antenna3_rssi:type_name -> google.protobuf.FloatValue
	57,  // 72: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_iface_count:type_name -> google.protobuf.UInt32Value
	59,  // 73: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_chan_busy_fraction:type_name -> google.protobuf.FloatValue
	59,  // 74: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_edcca_fraction:type_name -> google.protobuf.FloatValue
	59,  // 75: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_overlapping_bss_fraction:type_name -> google.protobuf.FloatValue
	57,  // 76: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_rx_bytes:type_name -> google.protobuf.UInt32Value
	57,  // 77: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_rx_packets:type_name -> google.protobuf.UInt32Value
	57,  // 78: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_rx_errors:type_name -> google.protobuf.UInt32Value
	57,  // 79: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_rx_frame_errors:type_name -> google.protobuf.UInt32Value
	59,  // 80: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_rx_packet_error_rate:type_name -> google.protobuf.FloatValue
	59,  // 81: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_rx_airtime_fraction:type_name -> google.protobuf.FloatValue
	57,  // 82: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_tx_bytes:type_name -> google.protobuf.UInt32Value
	57,  // 83: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_tx_packets:type_name -> google.protobuf.UInt32Value
	57,  // 84: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_tx_errors:type_name -> google.protobuf.UInt32Value
	59,  // 85: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_tx_packet_error_rate:type_name -> google.protobuf.FloatValue
	59,  // 86: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_tx_airtime_fraction:type_name -> google.protobuf.FloatValue
	59,  // 87: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_thermal_temp:type_name -> google.protobuf.FloatValue
	59,  // 88: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_thermal_temp:type_name -> google.protobuf.FloatValue
	59,  // 89: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_thermal_duty_cycle:type_name -> google.protobuf.FloatValue
	59,  // 90: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_thermal_duty_cycle:type_name -> google.protobuf.FloatValue
	57,  // 91: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_2ghz_thermal_throttled_seconds:type_name -> google.protobuf.UInt32Value
	57,  // 92: SpaceX.API.Device.starlink_router_hourly_metrics_v2.radios_5ghz_thermal_throttled_seconds:type_name -> google.protobuf.UInt32Value
	57,  // 93: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_rx_bytes:type_name -> google.protobuf.UInt32Value
	57,  // 94: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_rx_packets:type_name -> google.protobuf.UInt32Value
	57,  // 95: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_rx_errors:type_name -> google.protobuf.UInt32Value
	57,  // 96: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_rx_frame_errors:type_name -> google.protobuf.UInt32Value
	57,  // 97: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_tx_bytes:type_name -> google.protobuf.UInt32Value
	57,  // 98: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_tx_packets:type_name -> google.protobuf.UInt32Value
	57,  // 99: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_lan_eth_tx_errors:type_name -> google.protobuf.UInt32Value
	57,  // 100: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_rx_bytes:type_name -> google.protobuf.UInt32Value
	57,  // 101: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_rx_packets:type_name -> google.protobuf.UInt32Value
	57,  // 102: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_rx_errors:type_name -> google.protobuf.UInt32Value
	57,  // 103: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_rx_frame_errors:type_name -> google.protobuf.UInt32Value
	57,  // 104: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_tx_bytes:type_name -> google.protobuf.UInt32Value
	57,  // 105: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_tx_packets:type_name -> google.protobuf.UInt32Value
	57,  // 106: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ifaces_wan_eth_tx_errors:type_name -> google.protobuf.UInt32Value
	57,  // 107: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients:type_name -> google.protobuf.UInt32Value
	57,  // 108: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_2ghz:type_name -> google.protobuf.UInt32Value
	57,  // 109: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_5ghz:type_name -> google.protobuf.UInt32Value
	57,  // 110: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_eth:type_name -> google.protobuf.UInt32Value
	57,  // 111: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_repeater:type_name -> google.protobuf.UInt32Value
	57,  // 112: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_repeater_2ghz:type_name -> google.protobuf.UInt32Value
	57,  // 113: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_repeater_5ghz:type_name -> google.protobuf.UInt32Value
	57,  // 114: SpaceX.API.Device.starlink_router_hourly_metrics_v2.clients_repeater_eth:type_name -> google.protobuf.UInt32Value
	57,  // 115: SpaceX.API.Device.starlink_router_hourly_metrics_v2.mesh_hops:type_name -> google.protobuf.UInt32Value
	59,  // 116: SpaceX.API.Device.starlink_router_hourly_metrics_v2.mesh_one_hop_rssi_avg_2ghz:type_name -> google.protobuf.FloatValue
	59,  // 117: SpaceX.API.Device.starlink_router_hourly_metrics_v2.mesh_one_hop_rssi_avg_5ghz:type_name -> google.protobuf.FloatValue
	59,  // 118: SpaceX.API.Device.starlink_router_hourly_metrics_v2.mesh_two_hop_rssi_avg_2ghz:type_name -> google.protobuf.FloatValue
	59,  // 119: SpaceX.API.Device.starlink_router_hourly_metrics_v2.mesh_two_hop_rssi_avg_5ghz:type_name -> google.protobuf.FloatValue
	59,  // 120: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_seconds_since_last_1s_outage:type_name -> google.protobuf.FloatValue
	59,  // 121: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_seconds_since_last_2s_outage:type_name -> google.protobuf.FloatValue
	59,  // 122: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_seconds_since_last_5s_outage:type_name -> google.protobuf.FloatValue
	59,  // 123: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_seconds_since_last_60s_outage:type_name -> google.protobuf.FloatValue
	59,  // 124: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_seconds_since_last_300s_outage:type_name -> google.protobuf.FloatValue
	59,  // 125: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_drop_rate:type_name -> google.protobuf.FloatValue
	59,  // 126: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_drop_rate_last_1h:type_name -> google.protobuf.FloatValue
	59,  // 127: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_latency:type_name -> google.protobuf.FloatValue
	59,  // 128: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_seconds_since_last_1s_outage:type_name -> google.protobuf.FloatValue
	59,  // 129: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_seconds_since_last_2s_outage:type_name -> google.protobuf.FloatValue
	59,  // 130: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_seconds_since_last_5s_outage:type_name -> google.protobuf.FloatValue
	59,  // 131: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_seconds_since_last_60s_outage:type_name -> google.protobuf.FloatValue
	59,  // 132: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_seconds_since_last_300s_outage:type_name -> google.protobuf.FloatValue
	59,  // 133: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_drop_rate:type_name -> google.protobuf.FloatValue
	59,  // 134: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_drop_rate_last_1h:type_name -> google.protobuf.FloatValue
	59,  // 135: SpaceX.API.Device.starlink_router_hourly_metrics_v2.ping_dish_latency:type_name -> google.protobuf.FloatValue
	59,  // 136: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_router_download_mbps:type_name -> google.protobuf.FloatValue
	59,  // 137: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_router_upload_mbps:type_name -> google.protobuf.FloatValue
	59,  // 138: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_router_rssi:type_name -> google.protobuf.FloatValue
	59,  // 139: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_wifi_download_mbps:type_name -> google.protobuf.FloatValue
	59,  // 140: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_wifi_upload_mbps:type_name -> google.protobuf.FloatValue
	59,  // 141: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_download_mbps:type_name -> google.protobuf.FloatValue
	59,  // 142: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_upload_mbps:type_name -> google.protobuf.FloatValue
	59,  // 143: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_rssi:type_name -> google.protobuf.FloatValue
	57,  // 144: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_iface:type_name -> google.protobuf.UInt32Value
	56,  // 145: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_oui:type_name -> google.protobuf.StringValue
	57,  // 146: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_tx_rate:type_name -> google.protobuf.UInt32Value
	57,  // 147: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_rx_rate:type_name -> google.protobuf.UInt32Value
	57,  // 148: SpaceX.API.Device.starlink_router_hourly_metrics_v2.client_speedtest_client_platform_type:type_name -> google.protobuf.UInt32Value
	59,  // 149: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_8_download_mbps_avg:type_name -> google.protobuf.FloatValue
	59,  // 150: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_8_download_mbps_max:type_name -> google.protobuf.FloatValue
	59,  // 151: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_8_upload_mbps_avg:type_name -> google.protobuf.FloatValue
	59,  // 152: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_8_upload_mbps_max:type_name -> google.protobuf.FloatValue
	59,  // 153: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_64_download_mbps_avg:type_name -> google.protobuf.FloatValue
	59,  // 154: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_64_download_mbps_max:type_name -> google.protobuf.FloatValue
	59,  // 155: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_64_upload_mbps_avg:type_name -> google.protobuf.FloatValue
	59,  // 156: SpaceX.API.Device.starlink_router_hourly_metrics_v2.speedtest_tcp_64_upload_mbps_max:type_name -> google.protobuf.FloatValue
	57,  // 157: SpaceX.API.Device.starlink_router_hourly_metrics_v2.dish_cell_id:type_name -> google.protobuf.UInt32Value
	58,  // 158: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_setup_complete:type_name -> google.protobuf.BoolValue
	58,  // 159: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_bands_split:type_name -> google.protobuf.BoolValue
	58,  // 160: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_is_repeater:type_name -> google.protobuf.BoolValue
	58,  // 161: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_open_network:type_name -> google.protobuf.BoolValue
	58,  // 162: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_is_aviation:type_name -> google.protobuf.BoolValue
	58,  // 163: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_secure_dns:type_name -> google.protobuf.BoolValue
	58,  // 164: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_legacy:type_name -> google.protobuf.BoolValue
	58,  // 165: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_ap_mode:type_name -> google.protobuf.BoolValue
	58,  // 166: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_dfs_enabled:type_name -> google.protobuf.BoolValue
	58,  // 167: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_network_name_is_default:type_name -> google.protobuf.BoolValue
	58,  // 168: SpaceX.API.Device.starlink_router_hourly_metrics_v2.config_remote_ssh_enabled:type_name -> google.protobuf.BoolValue
	56,  // 169: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.id:type_name -> google.protobuf.StringValue
	56,  // 170: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.timestamp_date:type_name -> google.protobuf.StringValue
	57,  // 171: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.timestamp_hour:type_name -> google.protobuf.UInt32Value
	61,  // 172: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.timestamp:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	57,  // 173: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_hw_gen:type_name -> google.protobuf.UInt32Value
	56,  // 174: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_sw:type_name -> google.protobuf.StringValue
	56,  // 175: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_country:type_name -> google.protobuf.StringValue
	58,  // 176: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_is_dev:type_name -> google.protobuf.BoolValue
	57,  // 177: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_alloc_fds:type_name -> google.protobuf.UInt32Value
	59,  // 178: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_cpu_usage:type_name -> google.protobuf.FloatValue
	59,  // 179: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_mem_free_kb:type_name -> google.protobuf.FloatValue
	60,  // 180: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_bootcount:type_name -> google.protobuf.Int32Value
	58,  // 181: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_partitions_equal:type_name -> google.protobuf.BoolValue
	57,  // 182: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_uptime_seconds:type_name -> google.protobuf.UInt32Value
	60,  // 183: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.sys_anti_rollback_version:type_name -> google.protobuf.Int32Value
	57,  // 184: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_channel:type_name -> google.protobuf.UInt32Value
	59,  // 185: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_antenna1_rssi:type_name -> google.protobuf.FloatValue
	59,  // 186: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_antenna2_rssi:type_name -> google.protobuf.FloatValue
	59,  // 187: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_antenna3_rssi:type_name -> google.protobuf.FloatValue
	57,  // 188: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_iface_count:type_name -> google.protobuf.UInt32Value
	59,  // 189: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_chan_busy_fraction:type_name -> google.protobuf.FloatValue
	59,  // 190: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_edcca_fraction:type_name -> google.protobuf.FloatValue
	59,  // 191: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_overlapping_bss_fraction:type_name -> google.protobuf.FloatValue
	62,  // 192: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_rx_bytes:type_name -> google.protobuf.Int64Value
	62,  // 193: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_rx_packets:type_name -> google.protobuf.Int64Value
	62,  // 194: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_rx_errors:type_name -> google.protobuf.Int64Value
	62,  // 195: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_rx_frame_errors:type_name -> google.protobuf.Int64Value
	59,  // 196: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_rx_packet_error_rate:type_name -> google.protobuf.FloatValue
	59,  // 197: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_rx_airtime_fraction:type_name -> google.protobuf.FloatValue
	62,  // 198: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_tx_bytes:type_name -> google.protobuf.Int64Value
	62,  // 199: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_tx_packets:type_name -> google.protobuf.Int64Value
	62,  // 200: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_tx_errors:type_name -> google.protobuf.Int64Value
	59,  // 201: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_tx_packet_error_rate:type_name -> google.protobuf.FloatValue
	59,  // 202: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_tx_airtime_fraction:type_name -> google.protobuf.FloatValue
	57,  // 203: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_channel:type_name -> google.protobuf.UInt32Value
	59,  // 204: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_antenna1_rssi:type_name -> google.protobuf.FloatValue
	59,  // 205: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_antenna2_rssi:type_name -> google.protobuf.FloatValue
	59,  // 206: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_antenna3_rssi:type_name -> google.protobuf.FloatValue
	57,  // 207: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_iface_count:type_name -> google.protobuf.UInt32Value
	59,  // 208: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_chan_busy_fraction:type_name -> google.protobuf.FloatValue
	59,  // 209: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_edcca_fraction:type_name -> google.protobuf.FloatValue
	59,  // 210: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_overlapping_bss_fraction:type_name -> google.protobuf.FloatValue
	62,  // 211: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_rx_bytes:type_name -> google.protobuf.Int64Value
	62,  // 212: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_rx_packets:type_name -> google.protobuf.Int64Value
	62,  // 213: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_rx_errors:type_name -> google.protobuf.Int64Value
	62,  // 214: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_rx_frame_errors:type_name -> google.protobuf.Int64Value
	59,  // 215: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_rx_packet_error_rate:type_name -> google.protobuf.FloatValue
	59,  // 216: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_rx_airtime_fraction:type_name -> google.protobuf.FloatValue
	62,  // 217: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_tx_bytes:type_name -> google.protobuf.Int64Value
	62,  // 218: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_tx_packets:type_name -> google.protobuf.Int64Value
	62,  // 219: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_tx_errors:type_name -> google.protobuf.Int64Value
	59,  // 220: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_tx_packet_error_rate:type_name -> google.protobuf.FloatValue
	59,  // 221: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_tx_airtime_fraction:type_name -> google.protobuf.FloatValue
	59,  // 222: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_thermal_temp:type_name -> google.protobuf.FloatValue
	59,  // 223: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_thermal_temp:type_name -> google.protobuf.FloatValue
	59,  // 224: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_thermal_duty_cycle:type_name -> google.protobuf.FloatValue
	59,  // 225: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_thermal_duty_cycle:type_name -> google.protobuf.FloatValue
	57,  // 226: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_2ghz_thermal_throttled_seconds:type_name -> google.protobuf.UInt32Value
	57,  // 227: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.radios_5ghz_thermal_throttled_seconds:type_name -> google.protobuf.UInt32Value
	62,  // 228: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_rx_bytes:type_name -> google.protobuf.Int64Value
	62,  // 229: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_rx_packets:type_name -> google.protobuf.Int64Value
	62,  // 230: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_rx_errors:type_name -> google.protobuf.Int64Value
	62,  // 231: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_rx_frame_errors:type_name -> google.protobuf.Int64Value
	62,  // 232: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_tx_bytes:type_name -> google.protobuf.Int64Value
	62,  // 233: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_tx_packets:type_name -> google.protobuf.Int64Value
	62,  // 234: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_lan_eth_tx_errors:type_name -> google.protobuf.Int64Value
	62,  // 235: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_rx_bytes:type_name -> google.protobuf.Int64Value
	62,  // 236: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_rx_packets:type_name -> google.protobuf.Int64Value
	62,  // 237: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_rx_errors:type_name -> google.protobuf.Int64Value
	62,  // 238: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_rx_frame_errors:type_name -> google.protobuf.Int64Value
	62,  // 239: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_tx_bytes:type_name -> google.protobuf.Int64Value
	62,  // 240: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_tx_packets:type_name -> google.protobuf.Int64Value
	62,  // 241: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ifaces_wan_eth_tx_errors:type_name -> google.protobuf.Int64Value
	57,  // 242: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients:type_name -> google.protobuf.UInt32Value
	57,  // 243: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_2ghz:type_name -> google.protobuf.UInt32Value
	57,  // 244: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_5ghz:type_name -> google.protobuf.UInt32Value
	57,  // 245: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_eth:type_name -> google.protobuf.UInt32Value
	57,  // 246: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_repeater:type_name -> google.protobuf.UInt32Value
	57,  // 247: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_repeater_2ghz:type_name -> google.protobuf.UInt32Value
	57,  // 248: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_repeater_5ghz:type_name -> google.protobuf.UInt32Value
	57,  // 249: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.clients_repeater_eth:type_name -> google.protobuf.UInt32Value
	57,  // 250: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_hops:type_name -> google.protobuf.UInt32Value
	59,  // 251: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_one_hop_rssi_avg_2ghz:type_name -> google.protobuf.FloatValue
	59,  // 252: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_one_hop_rssi_avg_5ghz:type_name -> google.protobuf.FloatValue
	59,  // 253: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_two_hop_rssi_avg_2ghz:type_name -> google.protobuf.FloatValue
	59,  // 254: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.mesh_two_hop_rssi_avg_5ghz:type_name -> google.protobuf.FloatValue
	59,  // 255: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_seconds_since_last_1s_outage:type_name -> google.protobuf.FloatValue
	59,  // 256: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_seconds_since_last_2s_outage:type_name -> google.protobuf.FloatValue
	59,  // 257: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_seconds_since_last_5s_outage:type_name -> google.protobuf.FloatValue
	59,  // 258: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_seconds_since_last_60s_outage:type_name -> google.protobuf.FloatValue
	59,  // 259: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_seconds_since_last_300s_outage:type_name -> google.protobuf.FloatValue
	59,  // 260: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_drop_rate:type_name -> google.protobuf.FloatValue
	59,  // 261: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_drop_rate_last_1h:type_name -> google.protobuf.FloatValue
	59,  // 262: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_latency:type_name -> google.protobuf.FloatValue
	59,  // 263: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_latency_last_1h:type_name -> google.protobuf.FloatValue
	59,  // 264: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_seconds_since_last_1s_outage:type_name -> google.protobuf.FloatValue
	59,  // 265: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_seconds_since_last_2s_outage:type_name -> google.protobuf.FloatValue
	59,  // 266: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_seconds_since_last_5s_outage:type_name -> google.protobuf.FloatValue
	59,  // 267: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_seconds_since_last_60s_outage:type_name -> google.protobuf.FloatValue
	59,  // 268: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_seconds_since_last_300s_outage:type_name -> google.protobuf.FloatValue
	59,  // 269: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_drop_rate:type_name -> google.protobuf.FloatValue
	59,  // 270: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_drop_rate_last_1h:type_name -> google.protobuf.FloatValue
	59,  // 271: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_latency:type_name -> google.protobuf.FloatValue
	59,  // 272: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.ping_dish_latency_last_1h:type_name -> google.protobuf.FloatValue
	59,  // 273: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_router_download_mbps:type_name -> google.protobuf.FloatValue
	59,  // 274: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_router_upload_mbps:type_name -> google.protobuf.FloatValue
	59,  // 275: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_router_rssi:type_name -> google.protobuf.FloatValue
	59,  // 276: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_wifi_download_mbps:type_name -> google.protobuf.FloatValue
	59,  // 277: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_wifi_upload_mbps:type_name -> google.protobuf.FloatValue
	59,  // 278: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_download_mbps:type_name -> google.protobuf.FloatValue
	59,  // 279: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_upload_mbps:type_name -> google.protobuf.FloatValue
	59,  // 280: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_rssi:type_name -> google.protobuf.FloatValue
	57,  // 281: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_iface:type_name -> google.protobuf.UInt32Value
	56,  // 282: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_oui:type_name -> google.protobuf.StringValue
	57,  // 283: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_tx_rate:type_name -> google.protobuf.UInt32Value
	57,  // 284: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_rx_rate:type_name -> google.protobuf.UInt32Value
	57,  // 285: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.client_speedtest_client_platform_type:type_name -> google.protobuf.UInt32Value
	59,  // 286: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_8_download_mbps_avg:type_name -> google.protobuf.FloatValue
	59,  // 287: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_8_download_mbps_max:type_name -> google.protobuf.FloatValue
	59,  // 288: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_8_upload_mbps_avg:type_name -> google.protobuf.FloatValue
	59,  // 289: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_8_upload_mbps_max:type_name -> google.protobuf.FloatValue
	59,  // 290: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_64_download_mbps_avg:type_name -> google.protobuf.FloatValue
	59,  // 291: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_64_download_mbps_max:type_name -> google.protobuf.FloatValue
	59,  // 292: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_64_upload_mbps_avg:type_name -> google.protobuf.FloatValue
	59,  // 293: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.speedtest_tcp_64_upload_mbps_max:type_name -> google.protobuf.FloatValue
	57,  // 294: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.dish_cell_id:type_name -> google.protobuf.UInt32Value
	58,  // 295: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_setup_complete:type_name -> google.protobuf.BoolValue
	58,  // 296: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_bands_split:type_name -> google.protobuf.BoolValue
	58,  // 297: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_is_repeater:type_name -> google.protobuf.BoolValue
	58,  // 298: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_open_network:type_name -> google.protobuf.BoolValue
	58,  // 299: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_is_aviation:type_name -> google.protobuf.BoolValue
	58,  // 300: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_secure_dns:type_name -> google.protobuf.BoolValue
	58,  // 301: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_legacy:type_name -> google.protobuf.BoolValue
	58,  // 302: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_ap_mode:type_name -> google.protobuf.BoolValue
	58,  // 303: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_dfs_enabled:type_name -> google.protobuf.BoolValue
	58,  // 304: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_network_name_is_default:type_name -> google.protobuf.BoolValue
	58,  // 305: SpaceX.API.Device.starlink_routers_hourly_metrics_v2.config_remote_ssh_enabled:type_name -> google.protobuf.BoolValue
	61,  // 306: SpaceX.API.Device.starlink_router_alerts.start:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	61,  // 307: SpaceX.API.Device.starlink_router_alerts.end:type_name -> SpaceX.API.Telemetron.Public.Common.TimestampInfo
	3,   // 308: SpaceX.API.Device.WifiScanResults.Network.source:type_name -> SpaceX.API.Device.WifiScanResults.Network.Source
	6,   // 309: SpaceX.API.Device.Mesh.MeshStream:input_type -> SpaceX.API.Device.ToController
	8,   // 310: SpaceX.API.Device.Mesh.MeshStream:output_type -> SpaceX.API.Device.FromController
	310, // [310:311] is the sub-list for method output_type
	309, // [309:310] is the sub-list for method input_type
	309, // [309:309] is the sub-list for extension type_name
	309, // [309:309] is the sub-list for extension extendee
	0,   // [0:309] is the sub-list for field type_name
}

func init() { file_spacex_api_device_wifi_proto_init() }
func file_spacex_api_device_wifi_proto_init() {
	if File_spacex_api_device_wifi_proto != nil {
		return
	}
	file_spacex_api_device_common_proto_init()
	file_spacex_api_device_wifi_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spacex_api_device_wifi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiClients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiMeshJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetMeshDeviceTrustRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetMeshDeviceTrustResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetMeshConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetMeshConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetClientsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetClientsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetClientHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetClientHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiNewClientConnectedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiSetupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiBandStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiAlerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiAuthenticateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiAuthenticateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiAccountBondingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiNewPeerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetPingMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetPingMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetDiagnosticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetDiagnosticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiScanResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiPersistentStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiGetPersistentStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlinkRouterHourlyMetricsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlinkRoutersHourlyMetricsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlinkRouterAlerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiClient_RxStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiClient_TxStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiScanResults_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_wifi_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiPersistentStats_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spacex_api_device_wifi_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ToController_Clients)(nil),
		(*ToController_MeshJoin)(nil),
	}
	file_spacex_api_device_wifi_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*FromController_WifiConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacex_api_device_wifi_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spacex_api_device_wifi_proto_goTypes,
		DependencyIndexes: file_spacex_api_device_wifi_proto_depIdxs,
		EnumInfos:         file_spacex_api_device_wifi_proto_enumTypes,
		MessageInfos:      file_spacex_api_device_wifi_proto_msgTypes,
	}.Build()
	File_spacex_api_device_wifi_proto = out.File
	file_spacex_api_device_wifi_proto_rawDesc = nil
	file_spacex_api_device_wifi_proto_goTypes = nil
	file_spacex_api_device_wifi_proto_depIdxs = nil
}
